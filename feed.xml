<?xml version="1.0" encoding="UTF-8"?>

    <feed xmlns="http://www.w3.org/2005/Atom">
        <title>Adnane Belmadiaf's Blog</title>
        
        <link rel="alternate" href="http://daker.me/" />
        <link rel="self" href="http://daker.me/feed.xml" type="application/atom+xml" />
        <id>http://daker.me/</id>
        <updated>2014-05-11T21:41:03Z</updated>
        
        <author>
            <name>Adnane Belmadiaf</name>
            <email>daker@ubuntu.com</email>
            <uri>http://daker.me/</uri>
        </author>
        
        
            <entry>
                <title>How to use Oxide in your Ubuntu QML application</title>
                <link rel="alternate" href="http://daker.me/2014/05/how-to-use-oxide-in-your-ubuntu-qml-application.html" type="text/html" />
                <id>http://daker.me/2014/05/how-to-use-oxide-in-your-ubuntu-qml-application.html</id>
                <updated>2014-05-11T10:30:00Z</updated>
                
                <summary type="html">Oxide is a Qt5/QML binding based on the Chromium Content API, it&amp;#39;s intended to &lt;a href=&#34;http://www.chriscoulson.me.uk/blog/?p=196&#34;&gt;replace qtwebkit&lt;/a&gt; for the touch browser, webapps and the UbuntuWebView.</summary>
                <content type="html">&lt;p&gt;Oxide is a Qt5/QML binding based on the Chromium Content API, it&amp;#39;s intended to &lt;a href=&#34;http://www.chriscoulson.me.uk/blog/?p=196&#34;&gt;replace qtwebkit&lt;/a&gt; for the touch browser, webapps and the UbuntuWebView.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu-browser.png&#34; alt=&#34;The Ubuntu Browser app&#34;&gt;&lt;/p&gt;

&lt;p&gt;So what does Oxide provide for developers ? It does provide a good chunk a usefull functions :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic navigation&lt;/li&gt;
&lt;li&gt;Incognito mode&lt;/li&gt;
&lt;li&gt;Multiple browser contexts&lt;/li&gt;
&lt;li&gt;User scripts&lt;/li&gt;
&lt;li&gt;Message API&lt;/li&gt;
&lt;li&gt;Dialog support&lt;/li&gt;
&lt;li&gt;Accelerated compositing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;WebView&lt;/h2&gt;
&lt;p&gt;To declare a Webview using Oxide you need to use to components, &lt;code&gt;WebView&lt;/code&gt; from &lt;code&gt;com.canonical.Oxide&lt;/code&gt;&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import com.canonical.Oxide 1.0
[...]
WebView {
    id: webview
    width: parent.width
    height: parent.height

    Component.onCompleted: {
        url = &amp;#34;http://daker.me&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;WebView&lt;/code&gt; comes with a &lt;code&gt;preferences&lt;/code&gt; property which allows to set a list of attributes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;allowFileAccessFromFileUrls (bool)&lt;/li&gt;
&lt;li&gt;allowScriptsToCloseWindows  (bool)&lt;/li&gt;
&lt;li&gt;allowUniversalAccessFromFileUrls (bool)&lt;/li&gt;
&lt;li&gt;appCacheEnabled (bool)&lt;/li&gt;
&lt;li&gt;canDisplayInsecureContent (bool)&lt;/li&gt;
&lt;li&gt;canRunInsecureContent (bool)&lt;/li&gt;
&lt;li&gt;caretBrowsingEnabled (bool)&lt;/li&gt;
&lt;li&gt;databasesEnabled (bool)&lt;/li&gt;
&lt;li&gt;defaultEncoding (QString)&lt;/li&gt;
&lt;li&gt;defaultFixedFontSize (uint)&lt;/li&gt;
&lt;li&gt;defaultFontSize (uint)&lt;/li&gt;
&lt;li&gt;fixedFontFamily (QString)&lt;/li&gt;
&lt;li&gt;hyperlinkAuditingEnabled (bool)&lt;/li&gt;
&lt;li&gt;javascriptCanAccessClipboard (bool)&lt;/li&gt;
&lt;li&gt;javascriptEnabled (bool)&lt;/li&gt;
&lt;li&gt;loadsImagesAutomatically (bool)&lt;/li&gt;
&lt;li&gt;localStorageEnabled (bool)&lt;/li&gt;
&lt;li&gt;minimumFontSize (uint)&lt;/li&gt;
&lt;li&gt;objectName (QString)&lt;/li&gt;
&lt;li&gt;passwordEchoEnabled (bool)&lt;/li&gt;
&lt;li&gt;remoteFontsEnabled(bool)&lt;/li&gt;
&lt;li&gt;sanSerifFontFamily (QString)&lt;/li&gt;
&lt;li&gt;serifFontFamily (QString)&lt;/li&gt;
&lt;li&gt;shrinksStandaloneImagesToFit (bool)&lt;/li&gt;
&lt;li&gt;standardFontFamily (QString)&lt;/li&gt;
&lt;li&gt;tabsToLinks (bool)&lt;/li&gt;
&lt;li&gt;textAreasAreResizable (bool)&lt;/li&gt;
&lt;li&gt;touchEnabled  (bool)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example&lt;/h3&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import com.canonical.Oxide 1.0
[...]
WebView {
    id: webview
    width: parent.width
    height: parent.height

    Component.onCompleted: {
        url = &amp;#34;http://daker.me&amp;#34;
    }

    preferences.localStorageEnabled: true
    preferences.loadsImagesAutomatically: false
    preferences.passwordEchoEnabled: true
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;WebContext&lt;/h2&gt;
&lt;p&gt;Oxide also provides a &lt;code&gt;WebContext&lt;/code&gt; which allow to set other settings&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;acceptLangs (QString)&lt;/li&gt;
&lt;li&gt;cachePath (QUrl)&lt;/li&gt;
&lt;li&gt;cookiePolicy (CookiePolicy)&lt;/li&gt;
&lt;li&gt;dataPath (QUrl)&lt;/li&gt;
&lt;li&gt;objectName (QString)&lt;/li&gt;
&lt;li&gt;popupBlockerEnabled (bool)&lt;/li&gt;
&lt;li&gt;product (QString)&lt;/li&gt;
&lt;li&gt;sessionCookieMode&lt;/li&gt;
&lt;li&gt;storageAccessPermissionDelegate&lt;/li&gt;
&lt;li&gt;userAgent (QString)&lt;/li&gt;
&lt;li&gt;userAgentOverrideDelegate&lt;/li&gt;
&lt;li&gt;userScripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This example shows how you can use the &lt;code&gt;WebContext&lt;/code&gt; to override the default UserAgent&lt;/p&gt;
&lt;h3&gt;UserAgent&lt;/h3&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import com.canonical.Oxide 1.0
[...]
WebContext {
    id: webcontext
    userAgent: &amp;#34;Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&amp;#34;
}

WebView {
    id: webview
    width: parent.width
    height: parent.height

    context: webcontext

    Component.onCompleted: {
        url = &amp;#34;http://www.whatsmyuseragent.com&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;networkRequestDelegate&lt;/h3&gt;
&lt;p&gt;You can also override the http request headers by using the &lt;code&gt;networkRequestDelegate&lt;/code&gt;, in this example i am adding a &lt;a href=&#34;https://en.wikipedia.org/wiki/Do_Not_Track&#34;&gt;Do Not Track&lt;/a&gt; (DNT) an HTTP header field on the fly.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import com.canonical.Oxide 1.0
[...]
WebContext {
    id: webcontext
    networkRequestDelegate: WebContextDelegateWorker {
        source: Qt.resolvedUrl(&amp;#34;dnt.js&amp;#34;)
    }
}

WebView {
    id: webview
    width: parent.width
    height: parent.height

    context: webcontext

    Component.onCompleted: {
        url = &amp;#34;http://www.browserleaks.com/donottrack&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;/*
 dnt.js
 Made by Adnane Belmadiaf &amp;lt;daker AT ubuntu DOT com&amp;gt;
*/

exports.onBeforeSendHeaders = function(event) {
    event.setHeader(&amp;#34;DNT&amp;#34;, 1);
};
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;UserScripts&lt;/h3&gt;
&lt;p&gt;Oxide supports Greasemonkey-style user scripts, here is an example to do some DOM manipulation.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import com.canonical.Oxide 1.0
[...]
WebContext {
    id: webcontext
    userScripts: [
        UserScript {
            context: &amp;#34;oxide://&amp;#34;
            url: Qt.resolvedUrl(&amp;#34;oxide_dom.js&amp;#34;)
            incognitoEnabled: true
            matchAllFrames: true
        }
    ]
}

WebView {
    id: webview
    width: parent.width
    height: parent.height

    context: webcontext

    Component.onCompleted: {
        url = &amp;#34;http://www.ubuntu.com/&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;// ==UserScript==
// @name           Dom Manipulation
// @namespace      http://daker.me
// @description    Oxide UserScript demo
// ==/UserScript==

function oxide_dom() {
    var div = document.createElement(&amp;#39;div&amp;#39;);
    div.innerHTML = &amp;#39;&amp;lt;h1&amp;gt;Content inserted using Oxide UserScript!&amp;lt;/h1&amp;gt;&amp;#39;;
    div.style.color = &amp;#39;red&amp;#39;;
    document.getElementById(&amp;#34;nav-global&amp;#34;).insertBefore(div);
}

window.addEventListener(&amp;#39;load&amp;#39;, oxide_dom, true);
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Message API&lt;/h3&gt;
&lt;p&gt;Oxide does also provide a message API, in this example the script will send a message to Oxide on every request.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import com.canonical.Oxide 1.0
[...]
WebContext {
    id: webcontext
    networkRequestDelegate: WebContextDelegateWorker {
        source: Qt.resolvedUrl(&amp;#34;message-api.js&amp;#34;)
        onMessage: console.log(&amp;#34;Message from Oxide : &amp;#34;, message.msg)
        Component.onCompleted: {
            sendMessage({ msg: &amp;#39;ping&amp;#39; })
        }
    }
}

WebView {
    id: webview
    width: parent.width
    height: parent.height

    context: webcontext

    Component.onCompleted: {
        url = &amp;#34;http://www.ubuntu.com/&amp;#34;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;/*
 message-api.js
 This script will send a message to Oxide on every request
*/
var response_msg = &amp;#34;&amp;#34;;

oxide.onMessage = function(msg) {
    if (&amp;#34;msg&amp;#34; in msg) {
        if (msg[&amp;#34;msg&amp;#34;] == &amp;#39;ping&amp;#39;) {
            response_msg = &amp;#34;pong&amp;#34;;
        }
    }
};

exports.onBeforeSendHeaders = function(event) {
    oxide.sendMessage({msg: response_msg});
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sure you can still use the UbuntuWebView&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>4 CSS Tricks for Vertical Alignment</title>
                <link rel="alternate" href="http://daker.me/2014/04/4-css-tricks-for-vertical-alignment.html" type="text/html" />
                <id>http://daker.me/2014/04/4-css-tricks-for-vertical-alignment.html</id>
                <updated>2014-04-20T15:30:00Z</updated>
                
                <summary type="html">There are a few different techniques to vertically centre objects with CSS, in this post i’ll show you four ways to do it.</summary>
                <content type="html">&lt;p&gt;There are a few different techniques to vertically centre objects with CSS, in this post i’ll show you four ways to do it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/box-model.png&#34; alt=&#34;Box Model&#34;&gt;&lt;/p&gt;
&lt;h2&gt;display: table-cell&lt;/h2&gt;
&lt;p&gt;The first trick is by using &lt;code&gt;display: table&lt;/code&gt; for the parent of the element you want to center, then your element will behave like a table cell by using &lt;code&gt;display: table-cell&lt;/code&gt;.&lt;br&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/cx6MG/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;line-height&lt;/h2&gt;
&lt;p&gt;This technique only works if you have a single line text, by setting the &lt;code&gt;line-height&lt;/code&gt; will make in the middle of the parent div.&lt;br&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/5NhNX/1/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;CSS3 transform&lt;/h2&gt;
&lt;p&gt;With this technique we use the CSS property transform which is usally used for rotating and scaling elements, but it ca be also used to translate them vertically.&lt;br&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/dYdLn/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Flex Box&lt;/h2&gt;
&lt;p&gt;Flex Box is a layout mode providing for the arrangement of elements on a page.&lt;br&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/z58kQ/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Update on the Ubuntu HTML5 SDK UI</title>
                <link rel="alternate" href="http://daker.me/2014/03/update-on-the-ubuntu-html5-sdk-ui.html" type="text/html" />
                <id>http://daker.me/2014/03/update-on-the-ubuntu-html5-sdk-ui.html</id>
                <updated>2014-03-26T22:45:00Z</updated>
                
                <summary type="html">As you may know HTML5 apps are first class citizens on Ubuntu, to acheive that the Ubuntu plateform provides a set of APIs and UI elements like the QML SDK, in this post i&amp;#39;ll provide some updates on the HTML5 UI elements.</summary>
                <content type="html">&lt;p&gt;As you may know HTML5 apps are first class citizens on Ubuntu, to acheive that the Ubuntu plateform provides a set of APIs and UI elements like the QML SDK, in this post i&amp;#39;ll provide some updates on the HTML5 UI elements.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu-html5.png&#34; alt=&#34;Ubuntu loves HTML5&#34;&gt;&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34; src=&#34;https://apis.google.com/js/plusone.js&#34;&gt;&lt;/script&gt;
&lt;h2&gt;Ubuntu Shape&lt;/h2&gt;
&lt;p&gt;The actual implementation is using an image as background with the pseudo class :after which is very limited the design team have suggested that we used a simple CSS border-radius for now, a proposal made by &lt;a href=&#34;https://plus.google.com/u/0/+KyleNitzsche/posts&#34;&gt;Stuart Langridge&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Swipe To delete&lt;/h2&gt;
&lt;p&gt;Last week-end i had to seat and work on this missing feature, it&amp;#39;s still a work in progress since i need to finished the design of the API and how it should be declared.&lt;/p&gt;

&lt;div class=&#34;g-post&#34; data-href=&#34;https://plus.google.com/101694416703170881163/posts/auBU41xRHnB&#34;&gt;&lt;/div&gt;
&lt;h2&gt;i18n&lt;/h2&gt;
&lt;p&gt;The first proposal was based on JSON files, but we thought that this will need a lot of work to be consistent with Launchpad translation infrastructure.&lt;/p&gt;

&lt;p&gt;The HTML translation is done by using :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data-i18n-translate : this is used to collect all the strings that needs be translated used by JavaScript and used for pot generation&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;h1 data-i18n-translate&amp;gt;Good Morning&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;data-i18n-args : JSON data used to replace variables in the string, it only supports one level so far&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;h1 data-i18n-translate data-i18n-args=&amp;#39;{ &amp;#34;user&amp;#34;: &amp;#34;daker&amp;#34; }&amp;#39;&amp;gt;Good Morning &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;data-i18n-plural : This is the plural string, here &lt;a href=&#34;https://plus.google.com/u/0/+KyleNitzsche/posts&#34;&gt;Kyle&lt;/a&gt; suggested that we hardcode the &amp;quot;n&amp;quot; counter used to determine if the string will be plural or not to &amp;quot;num&amp;quot;, so the dev have to passe the &amp;quot;num&amp;quot; in the data-i18n-args instead of a proper data-i18n-n.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;h1 data-i18n-translate data-i18n-plural=&amp;#34;I have   cars&amp;#34; data-i18n-args=&amp;#39;{ &amp;#34;num&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;brand&amp;#34;: &amp;#34;Mercedes&amp;#34; }&amp;#39;&amp;gt;I have a  car&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;g-post&#34; data-href=&#34;https://plus.google.com/101694416703170881163/posts/DpgEVUdcQJd&#34;&gt;&lt;/div&gt;

&lt;div class=&#34;g-post&#34; data-href=&#34;https://plus.google.com/101694416703170881163/posts/AY3k3BYbCSS&#34;&gt;&lt;/div&gt;

&lt;p&gt;For the JS API, we will provide tree functions &lt;code&gt;i18n.tr&lt;/code&gt; and &lt;code&gt;i18n.dtr&lt;/code&gt; like in QML and a function to do string replacement &lt;code&gt;i18n.strargs&lt;/code&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tr(text);&lt;/li&gt;
&lt;li&gt;tr(singular, plural, int n);&lt;/li&gt;
&lt;li&gt;dtr(domain, text);&lt;/li&gt;
&lt;li&gt;dtr(domain, singular, plural, n);&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;i18n.tr(&amp;#39;Good Morning&amp;#39;);
i18n.strargs(i18n.tr(&amp;#39;Good Morning &amp;#39;), &amp;#39;{ &amp;#34;user&amp;#34;: &amp;#34;daker&amp;#34; }&amp;#39;));
i18n.strargs(i18n.tr(&amp;#39;I have a  car&amp;#39;, &amp;#39;I have   cars&amp;#39;, &amp;#39;1&amp;#39;), &amp;#39;{ &amp;#34;num&amp;#34;: &amp;#34;1&amp;#34;, &amp;#34;brand&amp;#34;: &amp;#34;Mercedes&amp;#34; }&amp;#39;));
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Grid Layout&lt;/h2&gt;
&lt;p&gt;I have tried to use the flexbox technique to provide a simple implementation of a grid layout by using data attributes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;data-role=&amp;quot;row&amp;quot; : To define a row&lt;/li&gt;
&lt;li&gt;data-role=&amp;quot;column&amp;quot; : To define a column&lt;/li&gt;
&lt;li&gt;data-align=&amp;quot;top, bottom, center&amp;quot; : To define the vertical alignment&lt;/li&gt;
&lt;li&gt;data-role=&amp;quot;column&amp;quot; + data-offset=&amp;quot;[10, 20, 25, 33, 34, 50, 66, 67, 75, 80, 90]&amp;quot; : To define the offset of the column&lt;/li&gt;
&lt;li&gt;data-role=&amp;quot;column&amp;quot; + data-size=&amp;quot;[10, 20, 25, 33, 34, 50, 66, 67, 75, 80, 90]&amp;quot; : To define the size of the column&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to helps us by contributing, by fixing &lt;a href=&#34;https://bugs.launchpad.net/ubuntu-html5-theme&#34;&gt;bugs&lt;/a&gt; or share your opinions ping me &amp;quot;daker&amp;quot; or &amp;quot;alex-abreu&amp;quot; on #ubuntu-webapps channel on freenode.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>On Using The HTML Media Capture in Mobile Browsers</title>
                <link rel="alternate" href="http://daker.me/2014/02/on-using-the-html-media-capture-in-mobile-browsers.html" type="text/html" />
                <id>http://daker.me/2014/02/on-using-the-html-media-capture-in-mobile-browsers.html</id>
                <updated>2014-02-06T23:15:00Z</updated>
                
                <summary type="html">Media Capture is one of the most interesting &lt;a href=&#34;http://daker.me/2013/05/5-html5-features-you-need-to-know.html&#34;&gt;features&lt;/a&gt; in HTML5, especially for mobile devices, it allows you to access the camera and the microphone of the device. HTML Media Capture simply extends the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element with a capture attribute.</summary>
                <content type="html">&lt;p&gt;Media Capture is one of the most interesting &lt;a href=&#34;http://daker.me/2013/05/5-html5-features-you-need-to-know.html&#34;&gt;features&lt;/a&gt; in HTML5, especially for mobile devices, it allows you to access the camera and the microphone of the device. HTML Media Capture simply extends the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element with a capture attribute.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The capture attribute is a boolean attribute that, if specified, indicates that the capture of media directly from the device&amp;#39;s environment using a media capture mechanism is preferred.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The element can capture :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An image&lt;/li&gt;
&lt;li&gt;A video sequence&lt;/li&gt;
&lt;li&gt;An audio sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Capture image&lt;/h2&gt;
&lt;p&gt;To capture an image you need to set the &lt;code&gt;accept=&amp;quot;image/*&amp;quot;&lt;/code&gt; and the &lt;code&gt;capture&lt;/code&gt; attributes, on the implementation on Chrome for Android is quite differente from to Firefox and Opera, Chrome opens the camera directly while the others opens a menu to select from diffrentes sources.&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input type=&amp;#34;file&amp;#34; accept=&amp;#34;image/*&amp;#34; capture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/media-capture/image-firefox.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://daker.me/assets/posts/media-capture/image-chrome1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://daker.me/assets/posts/media-capture/image-chrome2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Capture video&lt;/h2&gt;
&lt;p&gt;To capture a video, &lt;code&gt;accept=&amp;quot;video/*&amp;quot;&lt;/code&gt; should be also set, same behaviour will happen for Chrome and Firefox.&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input type=&amp;#34;file&amp;#34; accept=&amp;#34;video/*&amp;#34; capture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/media-capture/video-firefox.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://daker.me/assets/posts/media-capture/video-chrome1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://daker.me/assets/posts/media-capture/video-chrome2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Capture audio&lt;/h2&gt;
&lt;p&gt;To capture an audio sequence, you need to set &lt;code&gt;audio/*&lt;/code&gt; as a value for the &lt;code&gt;accept&lt;/code&gt; attribute, which will open the audio recorder application.&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input type=&amp;#34;file&amp;#34; accept=&amp;#34;audio/*&amp;#34; capture&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/media-capture/audio-firefox.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://daker.me/assets/posts/media-capture/audio-chrome1.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;http://daker.me/assets/posts/media-capture/audio-chrome2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

&lt;p&gt;I hope you&amp;#39;ll like this post and you&amp;#39;ll start using the HTML Media Capture in your webapps.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>How to use the Built-in Screen Recording in Android 4.4 KitKat</title>
                <link rel="alternate" href="http://daker.me/2014/01/how-to-use-the-built-in-screen-recording-in-android-4.4-kitkat.html" type="text/html" />
                <id>http://daker.me/2014/01/how-to-use-the-built-in-screen-recording-in-android-4.4-kitkat.html</id>
                <updated>2014-01-11T20:30:00Z</updated>
                
                <summary type="html">Android 4.4 KitKat now supports screen recording, it&amp;#39;s only accessible via an ADB command on unrooted devices a. This featues is really a great way to create walkthroughs, tutorials for apps and also perfect for reporting bugs.</summary>
                <content type="html">&lt;p&gt;Android 4.4 KitKat now supports screen recording, it&amp;#39;s only accessible via an ADB command on unrooted devices a. This featues is really a great way to create walkthroughs, tutorials for apps and also perfect for reporting bugs.&lt;/p&gt;

&lt;p&gt;&lt;video controls autoplay width=&#34;350&#34; height=&#34;500&#34;&gt;&lt;br&gt;
  &lt;source src=&#34;http://daker.me/assets/posts/android4.4/recording.mp4&#34; type=&#34;video/mp4&#34;&gt;&lt;br&gt;
&lt;/video&gt;&lt;/p&gt;

&lt;p&gt;To start using it you need to install ADB, you can use the phablet-team PPA if you are using Ubuntu which has the tools and dependencies for 12.04, 12.10, 13.04 and 13.10 to get everything setup, if not you can download the Android SDK from the &lt;a href=&#34;https://developer.android.com/sdk/index.html&#34;&gt;Android developer site&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:phablet-team/tools
$ sudo apt-get update
$ sudo apt-get install android-tools-adb
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Enable Developer Mode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to the settings menu, and scroll down to &amp;quot;About phone.&amp;quot; Tap on it.&lt;/li&gt;
&lt;li&gt;Scroll down to the bottom, where you see &amp;quot;Build number.&amp;quot;&lt;/li&gt;
&lt;li&gt;Tap on it seven (7) times.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Enable the USB debugging&lt;/h2&gt;
&lt;p&gt;Once done hit the Back button, youl&amp;#39;ll see an new entry called &amp;quot;Developer Options&amp;quot; just above the &amp;quot;About phone.&amp;quot; entry, tap on it, scroll down to the debugging section, then enable USB debugging, note that you’ve to confirm the security prompt on your device :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/android4.4/usb-debugging.png&#34; alt=&#34;USB debugging&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/android4.4/usb-debugging2.png&#34; alt=&#34;Security Question&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Using the Screen Recording&lt;/h2&gt;
&lt;p&gt;Once done, you need to make sure that your device is listed &amp;amp; connected using :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ adb devices
List of devices attached
xxxxxxxxxxxxxxxx  device
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then all you have to do is :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ adb shell screenrecord /sdcard/recording.mp4 &amp;amp;&amp;amp; adb pull /sdcard/recording.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default and maximum duration of a screenrecord is 3 minutes, you can use the &lt;code&gt;--time-limit&lt;/code&gt; argument to set the limit you want, here all arguements you can set :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;--help : Displays a usage summary.&lt;/li&gt;
&lt;li&gt;--size &lt;WIDTHxHEIGHT&gt; : Sets the video size, for example: 1280x720. The default value is the device&amp;#39;s main display resolution (if supported), 1280x720 if not. For best results, use a size supported by your device&amp;#39;s Advanced Video Coding (AVC) encoder.&lt;/li&gt;
&lt;li&gt;--bit-rate &lt;RATE&gt; : Sets the video bit rate for the video, in megabits per second. The default value is 4Mbps. You can increase the bit rate to improve video quality or lower it for smaller movie files. The following example sets the recording bit rate to 6Mbps:
screenrecord --bit-rate 6000000 /sdcard/demo.mp4&lt;/li&gt;
&lt;li&gt;--time-limit &lt;TIME&gt; : Sets the maximum recording time, in seconds. The default and maximum value is 180 (3 minutes).&lt;/li&gt;
&lt;li&gt;--rotate : Rotates the output 90 degrees. This feature is experimental.&lt;/li&gt;
&lt;li&gt;--verbose : Displays log information on command line screen. If you do not set this option, the utility does not display any information while running.&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
        
            <entry>
                <title>Chrome’s requestAutocomplete(), for a Better Payment on the Web &amp; Mobile</title>
                <link rel="alternate" href="http://daker.me/2014/01/chrome-requestautocomplete-better-payment-web-mobile.html" type="text/html" />
                <id>http://daker.me/2014/01/chrome-requestautocomplete-better-payment-web-mobile.html</id>
                <updated>2014-01-07T22:15:00Z</updated>
                
                <summary type="html">Google is always trying to make the web experience very easy including the online shopping experience, filling out the 21 pieces of data can be a painful task and specialy on mobile devices. Studies have shown that most of the consumers will leave the website or the mobile app without complete checkout because they have to fill the checkout form which detailed &amp;amp; very long. In 2011 Google launched Google Wallet, a step forward to try to simplify the payment process and make it less time consuming.</summary>
                <content type="html">&lt;p&gt;Google is always trying to make the web experience very easy including the online shopping experience, filling out the 21 pieces of data can be a painful task and specialy on mobile devices. Studies have shown that most of the consumers will leave the website or the mobile app without complete checkout because they have to fill the checkout form which detailed &amp;amp; very long. In 2011 Google launched Google Wallet, a step forward to try to simplify the payment process and make it less time consuming.&lt;/p&gt;

&lt;p&gt;During the last I/O Google introduced a new API called &lt;code&gt;requestAutocomplete()&lt;/code&gt;, which can auto-populate all of your payment details stored in the browser.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Particularly for mobile applications, this solves the problem of working with long or even multi-page forms. It improves the purchase checkout flow and reduces drop-off with a secure and concise payment submission UI. For merchants, this results in improved conversion rates, sorely needed in mobile purchase scenarios.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/requestAutocomplete/1.png&#34; alt=&#34;requestAutocomplete&#34;&gt;&lt;/p&gt;

&lt;p&gt;Calling the &lt;code&gt;requestAutocomplete()&lt;/code&gt; on a form element will auto-populate the data, the browser will use the form to detect which input types to populate, which means that the form doesn’t really need to be shown to the user.&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;button id=&amp;#34;checkout&amp;#34;&amp;gt;Checkout&amp;lt;/button&amp;gt;

&amp;lt;form id=&amp;#34;checkout-form&amp;#34; hidden&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;cc-name&amp;#34; name=&amp;#34;myname&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;cc-number&amp;#34; name=&amp;#34;ccnumber&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;cc-exp&amp;#34; name=&amp;#34;ccexp&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;cc-csc&amp;#34; name=&amp;#34;cccvc&amp;#34;&amp;gt;

  &amp;lt;input autocomplete=&amp;#34;billing street-address&amp;#34; name=&amp;#34;billaddress&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;billing locality&amp;#34; name=&amp;#34;billtown&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;billing region&amp;#34; name=&amp;#34;billstate&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;billing postal-code&amp;#34; name=&amp;#34;billzip&amp;#34;&amp;gt;

  &amp;lt;input autocomplete=&amp;#34;shipping street-address&amp;#34; name=&amp;#34;billaddress&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;shipping locality&amp;#34; name=&amp;#34;billtown&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;shipping region&amp;#34; name=&amp;#34;billstate&amp;#34;&amp;gt;
  &amp;lt;input autocomplete=&amp;#34;shipping postal-code&amp;#34; name=&amp;#34;billzip&amp;#34;&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;
  (function(){
    var form = document.getElementById(&amp;#39;checkout-form&amp;#39;);
    var button = document.getElementById(&amp;#39;checkout&amp;#39;);

    if (!(&amp;#34;requestAutocomplete&amp;#34; in form)) return;

    button.addEventListener(&amp;#39;click&amp;#39;, function(){
      form.requestAutocomplete();
    });

    form.addEventListener(&amp;#39;autocomplete&amp;#39;, function(){
      // The form contains the data. We could either submit it, or read the data
      form.submit();
    });
  }).call(this);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Autocomplete Attributes&lt;/h2&gt;&lt;h3&gt;Credit Card Details&lt;/h3&gt;
&lt;p&gt;The credit card data includes the following field types :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;cc-name&lt;/li&gt;
&lt;li&gt;cc-number&lt;/li&gt;
&lt;li&gt;cc-exp-month&lt;/li&gt;
&lt;li&gt;cc-exp-year&lt;/li&gt;
&lt;li&gt;cc-csc&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Address Details&lt;/h3&gt;
&lt;p&gt;Both the &lt;code&gt;shipping&lt;/code&gt; and &lt;code&gt;billing&lt;/code&gt; addresses have the following fields :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;tel&lt;/li&gt;
&lt;li&gt;tel-country-code&lt;/li&gt;
&lt;li&gt;tel-national&lt;/li&gt;
&lt;li&gt;street-address&lt;/li&gt;
&lt;li&gt;locality&lt;/li&gt;
&lt;li&gt;region&lt;/li&gt;
&lt;li&gt;postal-code&lt;/li&gt;
&lt;li&gt;country&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Autocomplete Events&lt;/h2&gt;
&lt;p&gt;Once &lt;code&gt;requestAutocomplete()&lt;/code&gt; has been called, a permissions dialog will be shown to the user, so he can accept or not to share his information with the page or fill them if he didn&amp;#39;t.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/requestAutocomplete/2.png&#34; alt=&#34;Me&#34;&gt;&lt;/p&gt;

&lt;p&gt;The autocomplete process is asynchronous, so you need to listen for the &lt;code&gt;autocomplete&lt;/code&gt; and &lt;code&gt;autocompleteerror&lt;/code&gt; events :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;autocomplete&lt;/code&gt; : fired if the user has successfully submitted the all payment details&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autocompleteerror&lt;/code&gt; : fired if an error occurs, it provides a &lt;code&gt;reason&lt;/code&gt; property :

&lt;ul&gt;
&lt;li&gt;invalid – The user&amp;#39;s data did not pass the HTML5 form validation.&lt;/li&gt;
&lt;li&gt;cancel – The user clicked cancel on the dialog.&lt;/li&gt;
&lt;li&gt;disabled – The browser supports requestAutocomplete, but it’s disabled in browser preferences.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;form.addEventListener(&amp;#39;autocomplete&amp;#39;, function() {
    form.submit();
});

form.addEventListener(&amp;#39;autocompleteerror&amp;#39;, function(event) {
    if (event.reason == &amp;#39;invalid&amp;#39;) {
        form.submit();
    } else if (event.reason != &amp;#39;cancel&amp;#39;) {
        window.location = &amp;#39;/checkout/&amp;#39;;
    } else if (event.reason == &amp;#39;disabled&amp;#39;) {
        window.location = &amp;#39;/checkout/&amp;#39;;
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can already start using it while being compatible with others browsers that didn&amp;#39;t implement it yet(and hope they will standardize it), by using the &lt;code&gt;event.reason&lt;/code&gt; as shown above and fallback to a normal checkout form.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;From a consumer perspective, it means that the 21 pieces of data to enter will be reduced to two or three clicks, this will dramatically improve the usability and conversion rates.&lt;/p&gt;

&lt;p&gt;NB: The &lt;code&gt;requestAutocomplete()&lt;/code&gt; is only implemented on Chrome Mobile and Google Chrome for Windows &amp;amp; MacOS.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Devtools Console, from Novice to Ninja</title>
                <link rel="alternate" href="http://daker.me/2013/12/devtools-console-from-novice-to-ninja.html" type="text/html" />
                <id>http://daker.me/2013/12/devtools-console-from-novice-to-ninja.html</id>
                <updated>2013-12-21T23:45:00Z</updated>
                
                <summary type="html">The &lt;a href=&#34;http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html&#34;&gt;JavaScript&lt;/a&gt; console is a powerful tool that allows developers debug their code using functions provided by the Console API and a shell prompt where they can enter commands and interact with the document object.</summary>
                <content type="html">&lt;p&gt;The &lt;a href=&#34;http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html&#34;&gt;JavaScript&lt;/a&gt; console is a powerful tool that allows developers debug their code using functions provided by the Console API and a shell prompt where they can enter commands and interact with the document object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/console.png&#34; alt=&#34;JavaScript Console&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Filters&lt;/h2&gt;
&lt;p&gt;There are different buttons allowing you to filter the display of messages logged to the console:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All — Shows all console output.&lt;/li&gt;
&lt;li&gt;Errors — Only show output from console.error()&lt;/li&gt;
&lt;li&gt;Warnings — Only show output from console.warn()&lt;/li&gt;
&lt;li&gt;Logs — Only show output from console.log(), console.info() and console.debug().&lt;/li&gt;
&lt;li&gt;Debug — Only show output from console.timeEnd() and other console output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/filters.png&#34; alt=&#34;Filters&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Errors and warnings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;console.info : Writes a message to the console with the visual &amp;quot;info&amp;quot; icon and color coding and a hyperlink to the line where it was called.&lt;/li&gt;
&lt;li&gt;console.warn : Writes a message to the console with the visual &amp;quot;warning&amp;quot; icon and color coding and a hyperlink to the line where it was called.&lt;/li&gt;
&lt;li&gt;console.debug : Writes a message to the console, including a hyperlink to the line where it was called.&lt;/li&gt;
&lt;li&gt;console.error : Writes a message to the console with the visual &amp;quot;error&amp;quot; icon and color coding and a hyperlink to the line where it was called.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/logging.png&#34; alt=&#34;Logging&#34;&gt;&lt;/p&gt;
&lt;h2&gt;console.dir[xml]&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.dir(object)&lt;/code&gt; prints an interactive listing of all properties of the object, while &lt;code&gt;console.dirxml(node)&lt;/code&gt; prints the XML source tree of an element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/dir.png&#34; alt=&#34;JavaScript Console&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Assertions&lt;/h2&gt;
&lt;p&gt;Tests that an expression is true using &lt;code&gt;console.assert&lt;/code&gt;. If not, it will write a message to the console and throw an exception.&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;var x=0;
console.assert((x == 1), &amp;#34;assert message: x != 1&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Grouping output&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.group&lt;/code&gt; allows you to group the message or log in Console tab. If you have some many logs in your code, you can probably divide your log into small group or subgroup&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var user = &amp;#34;jsmith&amp;#34;, authenticated = false;
console.group(&amp;#34;Authentication phase&amp;#34;);
console.log(&amp;#34;Authenticating user &amp;#39;%s&amp;#39;&amp;#34;, user);
// authentication code here...
if (!authenticated) {
    console.log(&amp;#34;User &amp;#39;%s&amp;#39; not authenticated.&amp;#34;, user)
}
console.groupEnd();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also do nested grouping :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var user = &amp;#34;jsmith&amp;#34;, authenticated = true, authorized = true;
// Top-level group
console.group(&amp;#34;Authenticating user &amp;#39;%s&amp;#39;&amp;#34;, user);
if (authenticated) {
    console.log(&amp;#34;User &amp;#39;%s&amp;#39; was authenticated&amp;#34;, user);
    // Start nested group
    console.group(&amp;#34;Authorizing user &amp;#39;%s&amp;#39;&amp;#34;, user);
    if (authorized) {
        console.log(&amp;#34;User &amp;#39;%s&amp;#39; was authorized.&amp;#34;, user);
    }
    // End nested group
    console.groupEnd();
}
// End top-level group
console.groupEnd();
console.log(&amp;#34;A group-less log trace.&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/nested.png&#34; alt=&#34;Nested Grouping&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Logging Array Data&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.table()&lt;/code&gt; is a very handy fonction to display Array object&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var langs = [
    { name: &amp;#34;JavaScript&amp;#34;, extension: &amp;#34;.js&amp;#34; },
    { name: &amp;#34;HTML&amp;#34;, extension: &amp;#34;.html&amp;#34; },
    { name: &amp;#34;CoffeeScript&amp;#34;, extension: &amp;#34;.coffee&amp;#34; },
    { name: &amp;#34;SASS&amp;#34;, extension: &amp;#34;.sass&amp;#34; }
];

console.table(langs);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/table.png&#34; alt=&#34;JavaScript Console&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Measuring Execution time&lt;/h2&gt;
&lt;p&gt;To mesure how long something it takes to execute a set of instructions :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var i, t = &amp;#34;&amp;#34;;

// Start
console.time(&amp;#34;OPNAME&amp;#34;);

for (i = 1; i &amp;lt;= 100; i++)
    t += i;

// Stop
console.timeEnd(&amp;#34;OPNAME&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Tracing&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.trace()&lt;/code&gt; prints the stacktrace of JavaScript execution at the point where it was called.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;function F(v) {
    return K(v + 1);
}

function K(v) {
    return Y(v + 2);
}

function Y(v) {
    console.trace();
};

F(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/trace.png&#34; alt=&#34;Console Trace&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Shortcuts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + J&lt;/code&gt; : Open the Chrome/ium Console&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+l&lt;/code&gt; : Clear the console&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getfirebug.com/wiki/index.php/Console_Panel&#34;&gt;Firebug Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/chrome-developer-tools/docs/javascript-debugging#console-assert&#34;&gt;Chrome DevTools documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
        
            <entry>
                <title>Adding UserMetrics to your app on Ubuntu Touch</title>
                <link rel="alternate" href="http://daker.me/2013/11/adding-usermetrics-to-your-app-on-ubuntu-touch.html" type="text/html" />
                <id>http://daker.me/2013/11/adding-usermetrics-to-your-app-on-ubuntu-touch.html</id>
                <updated>2013-11-30T16:00:00Z</updated>
                
                <summary type="html">The Welcome Screen infographic is one of the key components for the customization of the user experience on &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, beautiful visualisations of data from multiple sources, the &lt;code&gt;UserMetrics&lt;/code&gt; is the responsible component for updating the infographic using QML.</summary>
                <content type="html">&lt;p&gt;The Welcome Screen infographic is one of the key components for the customization of the user experience on &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, beautiful visualisations of data from multiple sources, the &lt;code&gt;UserMetrics&lt;/code&gt; is the responsible component for updating the infographic using QML.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/5.png&#34; alt=&#34;Welcome Screen&#34;&gt;&lt;/p&gt;

&lt;p&gt;To use the &lt;code&gt;UserMetrics&lt;/code&gt; QML module you need to install &lt;code&gt;qtdeclarative5-usermetrics0.1&lt;/code&gt; package on the desktop :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install qtdeclarative5-usermetrics0.1
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Apparmor Policy groups&lt;/h2&gt;
&lt;p&gt;Add the &lt;code&gt;usermetrics&lt;/code&gt; to your apparmor file :&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
    &amp;#34;policy_groups&amp;#34;: [
        ...
        &amp;#34;usermetrics&amp;#34;
    ],
    &amp;#34;policy_version&amp;#34;: 1.0
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;QML&lt;/h2&gt;
&lt;p&gt;First you need to import the &lt;code&gt;UserMetrics&lt;/code&gt; module :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;import UserMetrics 0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then create the metric(s) :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Metric {
    /* Set a unique ID for each metric object you use so you can access it in your QML code. */
    id: gameMetric

    /* Set a unique name for each metric object, this is used for the storage of the metric data. */
    name: &amp;#34;game-metrics&amp;#34;

    /* This is the format for the plural case. */
    format: &amp;#34;%1 missions completed today&amp;#34;

    /* This is the format for no data for the day. */
    emptyFormat: &amp;#34;0 missions completed today&amp;#34;

    /* This is the gettext domain used for the localisation, you can use the applicationName. */
    domain: &amp;#34;com.ubuntu.developer.daker.mygame&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Metric component provides two methods :&lt;/p&gt;

&lt;p&gt;— &lt;code&gt;increment(double amount = 1.0)&lt;/code&gt; : You can use this method if you want to increment metric by a specific amount ex: gameMetric.increment(3) or gameMetric.increment() to increment the metric by 1.&lt;br&gt;
— &lt;code&gt;update(double value)&lt;/code&gt; : You can use this method if you want to reset the metric and set a specific amount ex: gameMetric.update(5)&lt;/p&gt;

&lt;p&gt;The use of the Metric is not limited by the number.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Web Apps Remote Debugging on Ubuntu Touch</title>
                <link rel="alternate" href="http://daker.me/2013/11/web-apps-remote-debugging-on-ubuntu-touch.html" type="text/html" />
                <id>http://daker.me/2013/11/web-apps-remote-debugging-on-ubuntu-touch.html</id>
                <updated>2013-11-14T23:40:00Z</updated>
                
                <summary type="html">If you are writing Web Apps for &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, you might want to test them directly on the phone using the Ubuntu browser, this can be done by remotely debugging web pages using the built-in DevTools, which allow you to inspect, debug, and analyze the on-device experience with the full suite of tools you&amp;#39;re used to.</summary>
                <content type="html">&lt;p&gt;If you are writing Web Apps for &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, you might want to test them directly on the phone using the Ubuntu browser, this can be done by remotely debugging web pages using the built-in DevTools, which allow you to inspect, debug, and analyze the on-device experience with the full suite of tools you&amp;#39;re used to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/3.png&#34; alt=&#34;Ubuntu Browser&#34;&gt;&lt;/p&gt;

&lt;p&gt;The phablet-team PPA has the tools and dependencies for 12.04, 12.10, 13.04 and 13.10 to get everything setup:&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:phablet-team/tools
$ sudo apt-get update
$ sudo apt-get install phablet-tools android-tools-adb android-tools-fastboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plug the device via the USB cable, then run the following commands to connect to it through ADB&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ adb shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Switch to the phablet user :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo -u phablet -i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a note of your phone IP adresse :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ ifconfig wlan0 | grep &amp;#39;inet addr&amp;#39; | cut -d: -f2 | awk &amp;#39;{print $1}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done launch the webbrowser app using :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ upstart-app-launch webbrowser-app --inspector
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A browser instance will launch on the phone, point to URL of your webapp then access the Devtools with your Chrome/ium browser by opening &lt;code&gt;http://$YOUR-PHONE-IP:9221&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/4.png&#34; alt=&#34;DevTools&#34;&gt;&lt;/p&gt;

&lt;p&gt;The built-in Devtools is a bit old &amp;amp; slow so i am using the hosted version : &lt;code&gt;https://chrome-devtools-frontend.appspot.com/static/30.0.1599.118/devtools.html?ws=$YOUR-PHONE-IP:9221/devtools/page/$PAGE-ID&lt;/code&gt;, you can get the page id from &lt;code&gt;http://$YOUR-PHONE-IP:9221/pagelist.json&lt;/code&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Ubuntu Touch User-Agent</title>
                <link rel="alternate" href="http://daker.me/2013/11/ubuntu-touch-user-agent.html" type="text/html" />
                <id>http://daker.me/2013/11/ubuntu-touch-user-agent.html</id>
                <updated>2013-11-06T19:00:00Z</updated>
                
                <summary type="html">With the launch of &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt; v1.0, the OS now ships its own QtWebKit based browser which will be replaced by &lt;a href=&#34;https://launchpad.net/oxide&#34;&gt;Oxide&lt;/a&gt; a Chromium-powered webview by 14.04. There has been a lot of &lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1179596&#34;&gt;discussions&lt;/a&gt; arround the user-agent because many large sites(Facebook, Google, Twitter, Yahoo etc..) are sniffing the UA(for iPhone or Android tokens) to serve the mobile version of the site.</summary>
                <content type="html">&lt;p&gt;With the launch of &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt; v1.0, the OS now ships its own QtWebKit based browser which will be replaced by &lt;a href=&#34;https://launchpad.net/oxide&#34;&gt;Oxide&lt;/a&gt; a Chromium-powered webview by 14.04. There has been a lot of &lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1179596&#34;&gt;discussions&lt;/a&gt; arround the user-agent because many large sites(Facebook, Google, Twitter, Yahoo etc..) are sniffing the UA(for iPhone or Android tokens) to serve the mobile version of the site.&lt;/p&gt;

&lt;p&gt;Adding an Android or iPhone token will lead to unwanted behaviours, like showing ads for the Android app or even trying to open the Google Play app or the Youtube app. The browser now reports it in the following formats, depending on whether the device is a phone or a tablet, with the addition of an &lt;a href=&#34;https://bazaar.launchpad.net/%7Ephablet-team/webbrowser-app/trunk/view/head:/src/Ubuntu/Components/Extras/Browser/ua-overrides.js&#34;&gt;override mechanism&lt;/a&gt; that will override the UA on the fly and the site will serve us a proper mobile content.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/1.png&#34; alt=&#34;Facebook Android Ads&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Phone&lt;/h2&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Mozilla/5.0 (Ubuntu; Mobile) WebKit/537.21
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Tablet&lt;/h2&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Mozilla/5.0 (Ubuntu; Tablet) WebKit/537.21
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Pattern&lt;/h2&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Mozilla/5.0 (Ubuntu; $FormFactor) WebKit/$WebKitRev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also get it through JavaScript using the &lt;code&gt;navigator.userAgent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/2.png&#34; alt=&#34;Using the console&#34;&gt;&lt;/p&gt;

&lt;p&gt;So if you are doing UA sniffing it&amp;#39;s really better to look for &amp;quot;Mobile&amp;quot; rather than looking the OS identifier.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Package your Webapp for Ubuntu Touch</title>
                <link rel="alternate" href="http://daker.me/2013/10/package-your-webapp-for-ubuntu-touch.html" type="text/html" />
                <id>http://daker.me/2013/10/package-your-webapp-for-ubuntu-touch.html</id>
                <updated>2013-10-15T23:50:00Z</updated>
                
                <summary type="html">Last week i discovered a HTML5 game called &amp;#39;&lt;a href=&#34;http://phoboslab.org/xtype/&#34;&gt;X-Type&lt;/a&gt;&amp;#39;, which is basically a free dual stick shooter with endless boss battles. Unfortunately this game does only work on iOS and Android and it does use the UA sniffing mechanism to serve both desktop and mobile versions, and using the Ubuntu Touch user-agent it will only serve the desktop version which will not work on the phone.</summary>
                <content type="html">&lt;p&gt;Last week i discovered a HTML5 game called &amp;#39;&lt;a href=&#34;http://phoboslab.org/xtype/&#34;&gt;X-Type&lt;/a&gt;&amp;#39;, which is basically a free dual stick shooter with endless boss battles. Unfortunately this game does only work on iOS and Android and it does use the UA sniffing mechanism to serve both desktop and mobile versions, and using the Ubuntu Touch user-agent it will only serve the desktop version which will not work on the phone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/xtype/xtype.png&#34; alt=&#34;X-Type running on Ubuntu Touch&#34;&gt;&lt;/p&gt;

&lt;p&gt;First using the Qt Creator you have to create a &amp;quot;HTML5 Touch UI&amp;quot; project which will produce the following QML code :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import QtQuick 2.0
import Ubuntu.Components 0.1
import QtWebKit 3.0

MainView {
    objectName: &amp;#34;mainView&amp;#34;
    applicationName: &amp;#34;com.ubuntu.developer.daker.x-type&amp;#34;
    automaticOrientation: true

    width: units.gu(100)
    height: units.gu(75)

    Flickable {
        id: webViewFlickable
        anchors.fill: parent

        WebView {
            id: webView
            anchors.fill: parent
            url: &amp;#34;http://phoboslab.org/xtype/&amp;#34;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with using the QtWebKit Webview is that the device-pixel-ratio (DPR) is not set automatically causing the content of the Webview to not scale correctly, so you&amp;#39;ll need to get the corresponding value for your device from the &lt;code&gt;QTWEBKIT_DPR&lt;/code&gt; environment variable, there is actually no way to read those variables using QML so you&amp;#39;ll need to use some C++ code to read the &lt;code&gt;QTWEBKIT_DPR&lt;/code&gt; and passe it to QML so the content of the WebView will scale accordingly.&lt;/p&gt;

&lt;p&gt;The Ubuntu Touch Browser Plugin provides a component called &lt;code&gt;UbuntuWebView&lt;/code&gt;, it uses some kind of UA overrides to bypass the UA sniffing used to serve the mobile version of webapp(Gmail, G+, Facebook, Twitter, etc...) and changes the UA on the fly, unfortunately there was no way to set your own UA using the &lt;code&gt;UbuntuWebView&lt;/code&gt; but now you can since this &lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1237365&#34;&gt;bug #1237365&lt;/a&gt; has been fixed.&lt;/p&gt;

&lt;p&gt;Also with the &lt;code&gt;UbuntuWebView&lt;/code&gt; the &lt;code&gt;DPR&lt;/code&gt; weren&amp;#39;t set automatically(&lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1237348&#34;&gt;bug #1237348&lt;/a&gt;), it was also fixed and all those fixes has been shipped with image #96.&lt;/p&gt;

&lt;p&gt;Here is the QML code i used to embed the &amp;quot;X-Type&amp;quot; game(Fullscreen) but first you need to install the browser plugin :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install qtdeclarative5-ubuntu-ui-extras-browser-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import QtQuick 2.0
import Ubuntu.Components 0.1
import Ubuntu.Components.Extras.Browser 0.1


MainView {
    objectName: &amp;#34;mainView&amp;#34;
    applicationName: &amp;#34;com.ubuntu.developer.daker.x-type&amp;#34;
    //automaticOrientation: true

    width: units.gu(50)
    height: units.gu(75)

    UbuntuWebView {
        anchors.fill: parent
        url: &amp;#34;http://phoboslab.org/xtype/&amp;#34;
        /* This function is used to override the UA */
        function getUAString(url) {
            return &amp;#34;Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&amp;#34;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you need to create a &lt;code&gt;manifest.json&lt;/code&gt; file :&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
    &amp;#34;description&amp;#34;: &amp;#34;A Free HTML5 Dual Stick Shooter&amp;#34;,
    &amp;#34;framework&amp;#34;: &amp;#34;ubuntu-sdk-13.10&amp;#34;,
    &amp;#34;architecture&amp;#34;: &amp;#34;all&amp;#34;,
    &amp;#34;hooks&amp;#34;: {
        &amp;#34;x-type&amp;#34;: {
            &amp;#34;apparmor&amp;#34;: &amp;#34;x-type.json&amp;#34;,
            &amp;#34;desktop&amp;#34;: &amp;#34;x-type.desktop&amp;#34;
        }
    },
    &amp;#34;maintainer&amp;#34;: &amp;#34;Adnane Belmadiaf &amp;lt;daker@ubuntu.com&amp;gt;&amp;#34;,
    &amp;#34;name&amp;#34;: &amp;#34;com.ubuntu.developer.daker.x-type&amp;#34;,
    &amp;#34;title&amp;#34;: &amp;#34;X-Type&amp;#34;,
    &amp;#34;version&amp;#34;: &amp;#34;0.4&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the security policy groups &lt;code&gt;x-type.json&lt;/code&gt; :&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
    &amp;#34;policy_groups&amp;#34;: [
        &amp;#34;networking&amp;#34;
    ],
    &amp;#34;policy_version&amp;#34;: 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a .desktop file :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;[Desktop Entry]
Name=x-type
Comment=A Free HTML5 Dual Stick Shooter
Exec=qmlscene $@ x-type.qml
Icon=./x-type.png
Terminal=false
Type=Application
X-Ubuntu-Touch=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you need to add the icon and now all you have to do is to build the click package using &lt;code&gt;click build .&lt;/code&gt;and &lt;a href=&#34;https://myapps.developer.ubuntu.com/dev/click-apps/new/&#34;&gt;upload&lt;/a&gt; it to the store. I have also packaged another HTML5 game called &lt;a href=&#34;http://heliom.github.io/bytesjack/&#34;&gt;BytesJack&lt;/a&gt; using the same method, the source code of both games can be found &lt;a href=&#34;https://bazaar.launchpad.net/%7Edaker/+junk/x-type/files&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://bazaar.launchpad.net/%7Edaker/+junk/bytesjack/files&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Automate Your Dev Environment With Vagrant</title>
                <link rel="alternate" href="http://daker.me/2013/09/automate-your-dev-environment-with-vagrant.html" type="text/html" />
                <id>http://daker.me/2013/09/automate-your-dev-environment-with-vagrant.html</id>
                <updated>2013-09-29T18:00:00Z</updated>
                
                <summary type="html">I started feeling the need of automating my developement environments when i started contributing to several django projects run by the community, each project uses a different django version and several dependencies, thoses dependencies can be found or not on the Ubuntu version i use for my daily work. Vagrant is a great tool for those situations, it allow you to create and manage custom virtual environments to your needs using automated configuration technologies such as Chef, Puppet and Shell scripts.</summary>
                <content type="html">&lt;p&gt;I started feeling the need of automating my developement environments when i started contributing to several django projects run by the community, each project uses a different django version and several dependencies, thoses dependencies can be found or not on the Ubuntu version i use for my daily work. Vagrant is a great tool for those situations, it allow you to create and manage custom virtual environments to your needs using automated configuration technologies such as Chef, Puppet and Shell scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/vagrant/vagrant.jpg&#34; alt=&#34;Vagrant&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Installing Vagrant&lt;/h2&gt;
&lt;p&gt;Vagrant works with VirtualBox, and support &lt;a href=&#34;http://www.vagrantup.com/vmware&#34;&gt;Vmware Fusion&lt;/a&gt; and AWS via plugins&lt;/p&gt;
&lt;h3&gt;Install Virtualbox&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install virtualbox
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Install Vagrant&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure Vagrant is installed correctly&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant --version
Vagrant version 1.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Get your first VM up and running&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;start a vagrant config file in an empty project folder. this will create &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ mkdir project
$ cd project
$ vagrant init
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;edit &lt;code&gt;Vagrantfile&lt;/code&gt; to add the boxname&lt;/p&gt;
&lt;pre lang=&#34;ruby&#34;&gt;&lt;code&gt;Vagrant::Config.run do |config|
    config.vm.box = &amp;#34;devserver&amp;#34;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add a base image or box to quickly clone a virtual machine. this will create a folder .vagrant with an ubuntu box&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant box add devserver http://files.vagrantup.com/precise32.box
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;then you are ready to go&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant up
[default] Importing base box &amp;#39;precise32&amp;#39;...
[default] Matching MAC address for NAT networking...
[default] Clearing any previously set forwarded ports...
[default] Forwarding ports...
[default] -- 22 =&amp;gt; 2222 (adapter 1)
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Mounting shared folders...
[default] -- v-root: /vagrant
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wait for the command to finish, then you will have a VM ready for you to connect. the VM can be accessed via SSH:&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Provisioning&lt;/h2&gt;
&lt;p&gt;Vagrant allow you to use different Provisioners to easily setup your VM with everything it needs to run your project :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chef Solo&lt;/li&gt;
&lt;li&gt;Chef Server&lt;/li&gt;
&lt;li&gt;Puppet Standalone&lt;/li&gt;
&lt;li&gt;Puppet Server&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do prefer Puppet for provisioning, because it&amp;#39;s easy and it allow you to easily create a manifest to control the package, file or service with a few lines of code.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;Vagrantfile&lt;/code&gt; i use, i needed to forward the port 8000 because i want to access the webapp using my browser, i also increased the memory of the VM to 1GB, and made the project folder accessible to the VM :&lt;/p&gt;
&lt;pre lang=&#34;ruby&#34;&gt;&lt;code&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant::Config.run do |ltp|

    ltp.vm.box = &amp;#34;ltp-devserver&amp;#34;
    ltp.vm.box_url = &amp;#34;http://files.vagrantup.com/precise32.box&amp;#34;
    ltp.vm.forward_port 8000, 8000
    ltp.vm.network :hostonly, &amp;#34;33.33.33.10&amp;#34;
    ltp.vm.customize [&amp;#34;modifyvm&amp;#34;, :id, &amp;#34;--memory&amp;#34;, 1024]

    ltp.ssh.max_tries = 50
    ltp.ssh.timeout = 300

    ltp.vm.share_folder(&amp;#34;v-root&amp;#34;, &amp;#34;/home/vagrant/ltp&amp;#34;, &amp;#34;.&amp;#34;)

    ltp.vm.provision :puppet do |puppet|
        puppet.manifests_path = &amp;#34;puppet/manifests&amp;#34;
        puppet.manifest_file  = &amp;#34;vagrant.pp&amp;#34;
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here one of the classes i use on my dev environement :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;class init {

    group { &amp;#34;puppet&amp;#34;:
        ensure =&amp;gt; &amp;#34;present&amp;#34;,
    }

    # Let&amp;#39;s update the system
    exec { &amp;#34;update-apt&amp;#34;:
        command =&amp;gt; &amp;#34;sudo apt-get update&amp;#34;,
    }

    # Let&amp;#39;s install the dependecies
    package {
        [&amp;#34;python&amp;#34;, &amp;#34;python-dev&amp;#34;, &amp;#34;libjs-jquery&amp;#34;, &amp;#34;libjs-jquery-ui&amp;#34;, &amp;#34;iso-codes&amp;#34;, &amp;#34;gettext&amp;#34;, &amp;#34;python-pip&amp;#34;, &amp;#34;bzr&amp;#34;]:
        ensure =&amp;gt; installed,
        require =&amp;gt; Exec[&amp;#39;update-apt&amp;#39;] # The system update needs to run first
    }

    # Let&amp;#39;s install the project dependecies from pip
    exec { &amp;#34;pip-install-requirements&amp;#34;:
        command =&amp;gt; &amp;#34;sudo /usr/bin/pip install -r $PROJ_DIR/requirements.txt&amp;#34;,
        tries =&amp;gt; 2,
        timeout =&amp;gt; 600, # Too long, but this can take awhile
        require =&amp;gt; Package[&amp;#39;python-pip&amp;#39;, &amp;#39;python-dev&amp;#39;], # The package dependecies needs to run first
        logoutput =&amp;gt; on_failure,
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to specify one manifest file in your Vagranfile, if you need to split it, you can use something like this :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ tree
.
└── manifests
    ├── classes
    │   ├── init.pp
    │   └── ltp.pp
    └── vagrant.pp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;code&gt;vagrant.pp&lt;/code&gt; to define my project variables, and to make sure all the classes are executed in the order i want :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;import &amp;#34;classes/*.pp&amp;#34;

$PROJ_DIR = &amp;#34;/home/vagrant/ltp&amp;#34;

Exec {
    path =&amp;gt; &amp;#34;/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin&amp;#34;,
}

class dev {

    class {
        init: before =&amp;gt; Class[ltp];
        ltp:;
    }
}

include dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ltp&lt;/code&gt; class is only used to run some &lt;code&gt;django&lt;/code&gt; commands :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;class ltp {

    file { &amp;#34;$PROJ_DIR/loco_directory/local_settings.py&amp;#34;:
        ensure =&amp;gt; file,
        source =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory/local_settings.py.sample&amp;#34;,
        replace =&amp;gt; false;
    }

    exec {
        &amp;#34;db_download&amp;#34;:
            cwd =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory&amp;#34;,
            command =&amp;gt; &amp;#34;/usr/bin/wget http://people.ubuntu.com/~daker/ltp/ltp.db&amp;#34;,
            creates =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory/ltp.db&amp;#34;;
    }

    exec {
        &amp;#34;managepy_syncdb&amp;#34;:
            cwd =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory&amp;#34;,
            command =&amp;gt; &amp;#34;/usr/bin/python manage.py syncdb --noinput&amp;#34;,
    }

    exec {
        &amp;#34;managepy_migratedb&amp;#34;:
            cwd =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory&amp;#34;,
            command =&amp;gt; &amp;#34;/usr/bin/python manage.py migrate&amp;#34;,
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all i have to do is &lt;code&gt;vagrant up&lt;/code&gt; and let Vagrant do all his magic tricks :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant up
[default] Importing base box &amp;#39;ltp-devserver&amp;#39;...
[default] Matching MAC address for NAT networking...
[default] Clearing any previously set forwarded ports...
[default] Forwarding ports...
[default] -- 22 =&amp;gt; 2222 (adapter 1)
[default] -- 8000 =&amp;gt; 8000 (adapter 1)
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Running any VM customizations...
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Configuring and enabling network interfaces...
[default] Mounting shared folders...
[default] -- v-root: /home/vagrant/ltp
[default] -- manifests: /tmp/vagrant-puppet/manifests
[default] Running provisioner: Vagrant::Provisioners::Puppet...
[default] Running Puppet with /tmp/vagrant-puppet/manifests/vagrant.pp...
stdin: is not a tty
warning: Could not retrieve fact fqdn

notice: /Stage[main]/Init/Exec[update-apt]/returns: executed successfully

notice: /Stage[main]/Init/Package[python-pip]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Package[bzr]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Package[libjs-jquery-ui]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Package[python-dev]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Exec[pip-install-requirements]/returns: executed successfully

notice: /Stage[main]/Init/Package[gettext]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Ltp/File[/home/vagrant/ltp/loco_directory/local_settings.py]/ensure: defined content as &amp;#39;{md5}25234f94c80418dcb7cc59f3db2dd7f8&amp;#39;

notice: /Stage[main]/Ltp/Exec[db_download]/returns: executed successfully

notice: /Stage[main]/Ltp/Exec[managepy_syncdb]/returns: executed successfully

notice: /Stage[main]/Ltp/Exec[managepy_migratedb]/returns: executed successfully

notice: Finished catalog run in 811.47 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After i started using Vagrant, my workflow imporved a lot i start focusing on writing code rather than resolving packages conflicts, i do use a VM for each bug fix/feature i need to work on, and once the fix is merged i simply delete the VM without thinking about breaking anything.&lt;/p&gt;

&lt;p&gt;[NB]: Ubuntu now officially supports Vagrant, and provides &lt;a href=&#34;http://cloud-images.ubuntu.com/vagrant/&#34;&gt;official Ubuntu boxes&lt;/a&gt; for 12.04, 12.10, 13.04 and 13.10.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Introduction to Web Components, the Next Generation Markup</title>
                <link rel="alternate" href="http://daker.me/2013/09/introduction-to-web-components-next-generation-markup.html" type="text/html" />
                <id>http://daker.me/2013/09/introduction-to-web-components-next-generation-markup.html</id>
                <updated>2013-09-21T14:25:00Z</updated>
                
                <summary type="html">Web Components enables frontend developers to create custom and reusable HTML tags, it&amp;#39;s the latest bleeding-edge web technologies being developed, the project is led by the Chrome dev team and aims to solve a simple problem: Building Web applications is more complicated than it used to be. Worse, it&amp;#39;s more complicated than it should be.</summary>
                <content type="html">&lt;p&gt;Web Components enables frontend developers to create custom and reusable HTML tags, it&amp;#39;s the latest bleeding-edge web technologies being developed, the project is led by the Chrome dev team and aims to solve a simple problem: Building Web applications is more complicated than it used to be. Worse, it&amp;#39;s more complicated than it should be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/webcomponents.png&#34; alt=&#34;Web Components&#34;&gt;&lt;/p&gt;
&lt;h2&gt;HTML Templates&lt;/h2&gt;
&lt;p&gt;A template provides a method for declaring document fragments in HTML, it contains a chunks of markup that can be used later. The &lt;code&gt;template&lt;/code&gt; element is not rendered but parsed, which means that scripts aren&amp;#39;t processed, css and images aren&amp;#39;t downloaded, it&amp;#39;s completly hidden from the document object, so for ex you can&amp;#39;t access the &lt;code&gt;.comment-text&lt;/code&gt; element using &lt;code&gt;document.querySelector&lt;/code&gt;.&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;template id=&amp;#34;commentTemplate&amp;#34;&amp;gt;
    &amp;lt;img src=&amp;#34;&amp;#34;&amp;gt; &amp;lt;!-- dynamically populate at runtime --&amp;gt;
    &amp;lt;div class=&amp;#34;comment-text&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;!-- dynamically populate at runtime --&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/m85DN/embedded/result,css,html,js&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;h2&gt;Custom Elements&lt;/h2&gt;
&lt;p&gt;The W3C defines it as follows :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;custom elements let authors define their own elements, including new presentation and API, that can be used in HTML documents&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means you will be able to create new HTML elements and extend the existing DOM objects with new ones. The name of any custom element must contain a dash (-) :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;element name=&amp;#34;x-foo-bar&amp;#34; constructor=&amp;#34;XFooBar&amp;#34;&amp;gt;
...
&amp;lt;/element&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and use it like this &lt;code&gt;&amp;lt;x-foo-bar&amp;gt;Test&amp;lt;/x-foo-bar&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Shadow DOM&lt;/h2&gt;
&lt;p&gt;Browser vendors have been using Shadow DOM for quite awhile now to build their own components. These components are built using HTML and CSS, but you cannot see how thesee elements are made up on the dev tools simply because they use the Shadow DOM , ex : &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&amp;quot;date&amp;quot;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input type=&amp;quot;time&amp;quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Shadow DOM gives us markup encapsulation, style boundaries, and exposes (to web developers) the same mechanics browsers vendors have been using to implement their internal UI. — Eric Bidelman&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/input-date-time.png&#34; alt=&#34;Date &amp;amp; time input&#34;&gt;&lt;/p&gt;
&lt;h2&gt;HTML Imports&lt;/h2&gt;
&lt;p&gt;HTML Imports is similar way to how we load CSS stylesheets, it&amp;#39;s a new type of link tag which allow developers to import and use HTML code from a url, after importing the page you need to use some Javascript code to manipulate it and inject your code :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;link rel=&amp;#34;import&amp;#34; href=&amp;#34;/import/page-to-import.html&amp;#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is an example :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt;
        &amp;lt;title&amp;gt;HTML Imports&amp;lt;/title&amp;gt;
        &amp;lt;link rel=&amp;#34;import&amp;#34; href=&amp;#34;/import.html&amp;#34;&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;p&amp;gt;Hello World!&amp;lt;/p&amp;gt;
        &amp;lt;script&amp;gt;
            var link = document.querySelector(&amp;#39;link[rel=import]&amp;#39;),
                content = link.import.querySelector(&amp;#39;#page-content&amp;#39;);
            document.body.appendChild(content.cloneNode(true));
        &amp;lt;/script&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;!-- import.html --&amp;gt;
&amp;lt;div id=&amp;#34;page-content&amp;#34;&amp;gt;
    &amp;lt;p&amp;gt;This is the content of the imported page.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One thing you should keep in mind that thoses APIs are still in developement so don&amp;#39;t exepect a full support rightnow, Chrome/ium have implemented some of them but you&amp;#39;ll need to enable them in &lt;code&gt;about://flags&lt;/code&gt;&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>5 DevTools features to help you debug your WebApp</title>
                <link rel="alternate" href="http://daker.me/2013/09/5-devtools-features-to-help-you-debug-your-webapp.html" type="text/html" />
                <id>http://daker.me/2013/09/5-devtools-features-to-help-you-debug-your-webapp.html</id>
                <updated>2013-09-14T22:15:00Z</updated>
                
                <summary type="html">DevTools is a powerful tool than can made developing WebApp easier, it has a lot of features some of them are still experimental and you need to enable them in the &lt;code&gt;about://flags&lt;/code&gt;.</summary>
                <content type="html">&lt;p&gt;DevTools is a powerful tool than can made developing WebApp easier, it has a lot of features some of them are still experimental and you need to enable them in the &lt;code&gt;about://flags&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/devtools.png&#34; alt=&#34;Devtools&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Breakpoints&lt;/h2&gt;
&lt;p&gt;Breakpoint are related to the JavaScript code, it let&amp;#39;s you halt the JavaScript code execution and inspect the current environment. You can set them by simply going the &amp;quot;Source&amp;quot; tab, then select the JS file you want to debug , find the line you want to set a breakpoint on, then click the line number to apply a breakpoint :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/breakpoints.png&#34; alt=&#34;Javascript Breakpoints&#34;&gt;&lt;/p&gt;

&lt;p&gt;The DevTools also supports conditional breakpoints.&lt;/p&gt;
&lt;h2&gt;DOM Breakpoints&lt;/h2&gt;
&lt;p&gt;The DevTools can also be used to set breakpoints on the DOM elements direclty, just right click on the element you want to break on, then select the option you want :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/dom-breakpoints.png&#34; alt=&#34;DOM Breakpoints&#34;&gt;&lt;/p&gt;
&lt;h2&gt;monitorEvents&lt;/h2&gt;
&lt;p&gt;The Devtools has a built function called &lt;code&gt;monitorEvents&lt;/code&gt;, it lets you monitor objects for mouse, key, touch or control events :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/monitorEvents.png&#34; alt=&#34;monitorEvents&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Pretty Print&lt;/h2&gt;
&lt;p&gt;Pretty Print is a handy feature for debugging minified JavaScript. Trying to to set a breakpoint when everything is on the same line is something impossible, clicking on the &lt;code&gt;{}&lt;/code&gt; icon will make your Javascript code readable and easier to debug :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/pprint-before.png&#34; alt=&#34;Pretty Print - Before&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/pprint-after.png&#34; alt=&#34;Pretty Print - After&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Remote Debugging&lt;/h2&gt;
&lt;p&gt;The Remote Debugger lets you connect Chrome/ium browser to the Chrome mobile browser so that you can use your desktop browser to debug all your tabs from your remote device :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/remote-debugging.png&#34; alt=&#34;Remote Debugging&#34;&gt;&lt;/p&gt;

&lt;p&gt;and sure the DevTools still has a lot of features to cover from the &lt;code&gt;Source&lt;/code&gt; to the &lt;code&gt;Console&lt;/code&gt; Tab.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Adding Persona authentication to your django project</title>
                <link rel="alternate" href="http://daker.me/2013/09/adding-persona-authentication-to-your-django-project.html" type="text/html" />
                <id>http://daker.me/2013/09/adding-persona-authentication-to-your-django-project.html</id>
                <updated>2013-09-01T16:30:00Z</updated>
                
                <summary type="html">&lt;a href=&#34;https://www.mozilla.org/en-US/persona/&#34;&gt;Persona&lt;/a&gt; is a decentralized login system made by &lt;a href=&#34;https://www.mozilla.org/&#34;&gt;Mozilla&lt;/a&gt; that aims to eliminate site-specific passwords so you can log in with your existing email accounts without having to type in a password.</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/persona/&#34;&gt;Persona&lt;/a&gt; is a decentralized login system made by &lt;a href=&#34;https://www.mozilla.org/&#34;&gt;Mozilla&lt;/a&gt; that aims to eliminate site-specific passwords so you can log in with your existing email accounts without having to type in a password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/persona-mozilla.jpg&#34; alt=&#34;Persona&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Mozilla provides a library called &lt;code&gt;django-browserid&lt;/code&gt; that integrates Persona authentication into Django, so you can simply added to to your &lt;code&gt;requirements.txt&lt;/code&gt; or just install via pip :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo pip install django-browserid
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Once done you need to follow the following steps :&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;django-browserid&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt;,&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;INSTALLED_APPS = (
    # ...
    &amp;#39;django.contrib.auth&amp;#39;,
    &amp;#39;django.contrib.contenttypes&amp;#39;,
    &amp;#39;django.contrib.staticfiles&amp;#39;,
    &amp;#39;django.contrib.sessions&amp;#39;,
    &amp;#39;django.contrib.messages&amp;#39;,
    &amp;#39;django.contrib.admin&amp;#39;,
    &amp;#39;django_browserid&amp;#39;,
    # ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the &lt;code&gt;django_browserid&lt;/code&gt; authentication backend :&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS = (
   # ...
   &amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;, # required for admin
   &amp;#39;django_browserid.auth.BrowserIDBackend&amp;#39;,
   # ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the &lt;code&gt;django_browserid&lt;/code&gt; context processor :&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;TEMPLATE_CONTEXT_PROCESSORS = (
   # ...
   &amp;#39;django_browserid.context_processors.browserid&amp;#39;,
   # ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally you need to set your site url :&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;SITE_URL = &amp;#39;https://example.com&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have created a working demo project on &lt;a href=&#34;https://github.com/daker/django-persona-demo&#34;&gt;github&lt;/a&gt; to play with, you can still check the &lt;a href=&#34;http://django-browserid.readthedocs.org/en/v0.9/details/troubleshooting.html&#34;&gt;docs&lt;/a&gt; or comment here if it doesn&amp;#39;t work for you.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Thank you, Ubuntu!</title>
                <link rel="alternate" href="http://daker.me/2013/08/thank-you-ubuntu.html" type="text/html" />
                <id>http://daker.me/2013/08/thank-you-ubuntu.html</id>
                <updated>2013-08-26T21:30:00Z</updated>
                
                <summary type="html">My experience with &lt;a href=&#34;http://www.ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; started in 2007 when i was doing the internship of my second year in Computer Engineering, the first week was really boring, the second week and while i was trying to fix the DVD driver, i opened the drawer then i found a Green CD of &amp;quot;OpenSUSE&amp;quot;, i booted with the live CD, the OS was a bit complicated and not easy to play with.</summary>
                <content type="html">&lt;p&gt;My experience with &lt;a href=&#34;http://www.ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; started in 2007 when i was doing the internship of my second year in Computer Engineering, the first week was really boring, the second week and while i was trying to fix the DVD driver, i opened the drawer then i found a Green CD of &amp;quot;OpenSUSE&amp;quot;, i booted with the live CD, the OS was a bit complicated and not easy to play with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/certificate.jpg&#34; alt=&#34;My Ubuntu certificate, signed by Mark Shuttleworth&#34;&gt;&lt;/p&gt;

&lt;p&gt;I started googling for other Gnu/Linux distributions, after a few hours i found a distro called &amp;quot;Ubuntu&amp;quot;, i downloaded the iso, booted with the live CD it was easy to access almost everything(browser, e-mail client, musique player and an office suite that comes out of the box), then Ubuntu becomes my second OS.&lt;/p&gt;

&lt;p&gt;In 2009 i read an &lt;a href=&#34;http://www.omgubuntu.co.uk/2010/01/interview-with-ubuntu-manual-project-leader&#34;&gt;article&lt;/a&gt; on OMG!Ubuntu about a project called &amp;quot;The Ubuntu Manual Project&amp;quot;, they were looking for contributors, as you may know i do a lot of web developement i jumed on the IRC channel someone pointed me the mockups, in few days the &lt;a href=&#34;http://ubuntu-manual.org&#34;&gt;site(made by myself)&lt;/a&gt; was up and running until now. That&amp;#39;s where my story with Ubuntu began.&lt;/p&gt;

&lt;p&gt;I learned a lot of things and i had the pleasure to know and meet a lot of great &amp;amp; inspiring people virtually and IRL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/1.jpg&#34; alt=&#34;Me and Daniel Holbach&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/2.jpg&#34; alt=&#34;From the right : IamNotThatGuy , Me, Joel Pickett, Rohan Garg, Ayrton Araújo, Randall Ross &amp;lt;br /&amp;gt;Steve Riley the former face of Microsoft Security and another guy&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/3.jpg&#34; alt=&#34;Me and the Kubuntu developers&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/4.jpg&#34; alt=&#34;Me and the Kubuntu developers again&#34;&gt;&lt;/p&gt;

&lt;p&gt;Thank you, Ubuntu!&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Why Stylus fit better my needs</title>
                <link rel="alternate" href="http://daker.me/2013/07/why-stylus-fit-better-my-needs.html" type="text/html" />
                <id>http://daker.me/2013/07/why-stylus-fit-better-my-needs.html</id>
                <updated>2013-07-24T14:25:00Z</updated>
                
                <summary type="html">Stylus is an expressive, dynamic, robust CSS pre-processor built on top of Node.js. LESS and Sass are both great, they try to stay as close as the original CSS syntax as possible to minimize the impact of having to learn a new language, but for me someone who cares about simplicity and readability, the syntax becomes an important part of the language or the framework.</summary>
                <content type="html">&lt;p&gt;Stylus is an expressive, dynamic, robust CSS pre-processor built on top of Node.js. LESS and Sass are both great, they try to stay as close as the original CSS syntax as possible to minimize the impact of having to learn a new language, but for me someone who cares about simplicity and readability, the syntax becomes an important part of the language or the framework.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/stylus.png&#34; alt=&#34;Stylus&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;&lt;h3&gt;Ubuntu&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:chris-lea/node.js
$ sudo apt-get update
$ sudo apt-get install nodejs
$ sudo npm install -g stylus
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Mac OSX&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ brew install node
$ curl https://npmjs.org/install.sh | sh
$ npm install -g stylus
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For me as someone who comes from a Python world, Stylus syntax strips away all the colons, semicolons, brackets and most parentheses from regular CSS script, which become like a python syntax, easy and dead simple.&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;#container
    width 980px
    margin 0 auto
    background #ccc
    font 12px Helvetica, Arial, sans-serif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which produce the following CSS code&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;#container {
    width: 980px;
    margin: 0 auto;
    background: #ccc;
    font: 12px Helvetica, Arial, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Variables&lt;/h2&gt;
&lt;p&gt;Defining variables is simple, you don&amp;#39;t need to use $ or @ like in Sass or LESS, the good part is that Stylus also support the $ so if you are coming from Sass your variables will remain functionnal.&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;font-size = 14px
color = #ff0000

body
    font-family  Arial, sans-serif
    font-size font-size
    color color
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once compiled, you&amp;#39;ll get the following CSS code&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;body {
    font-family: Arial, sans-serif;
    font-size: 14px;
    color: #f00;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Did you noticed something ? the color has been compressed automatically.&lt;/p&gt;
&lt;h2&gt;Mixins&lt;/h2&gt;
&lt;p&gt;Mixins are similar to functions, but used in a different way, a good example of a mixin is the border-radius property&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;border-radius(n)
    -webkit-border-radius n
    -moz-border-radius n
    -ms-border-radius n
    -o-border-radius n
    border-radius n

#btn
    border-radius(3px) /* or just border-radius 3px */
    background #e9573f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The compiled version will be&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;#btn {
    -webkit-border-radius: 3px;
    -moz-border-radius: 3px;
    -ms-border-radius: 3px;
    -o-border-radius: 3px;
    border-radius: 3px;
    background: #e9573f;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Handy for vendor-prefixed properties.&lt;/p&gt;
&lt;h2&gt;Iteration&lt;/h2&gt;
&lt;p&gt;Stylus gives you the ablity to iterate expressions via for/in&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;ul
    for row in 1 2 3 4 5
        li:nth-child({row})
            height: 10px * row
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS code will be&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;ul li:nth-child(1) {
    height: 10px;
}

ul li:nth-child(2) {
    height: 20px;
}

ul li:nth-child(3) {
    height: 30px;
}

ul li:nth-child(4) {
    height: 40px;
}

ul li:nth-child(5) {
    height: 50px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Inheritance&lt;/h2&gt;
&lt;p&gt;Stylus provides a good inheritance mecanism&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;.notice
    padding 10px
    border 1px solid #eee

.warning
    @extend .notice
    color #e2e21e
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;.notice,
.warning {
    padding: 10px;
    border: 1px solid #eee;
}

.warning {
    color: #e2e21e;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Error Reporting&lt;/h2&gt;
&lt;p&gt;Stylus has fantastic error reporting built-in for syntax, parse, and evaluation errors—complete with stack traces, line numbers, and filenames.&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;.message
    padding 10px
    border 1px solid [#ccc]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output will look something like this&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ stylus buggy-demo.styl

/usr/lib/node_modules/stylus/bin/stylus:530
              throw err;
                    ^
Error: t.styl:3
   1| .message
   2|     padding 10px
 &amp;gt; 3|     border 1px solid [#ccc]

cannot perform solid[(#ccc)]
    at &amp;#34;.message&amp;#34; (t.styl:NaN)
    at Ident.Node.operate (/usr/lib/node_modules/stylus/lib/nodes/node.js:189:13)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stylus provides a detailed stack trace much like you would find in any decent language.&lt;/p&gt;
&lt;h2&gt;Literal CSS&lt;/h2&gt;
&lt;p&gt;This the best part of Stylus, you can still use your CSS code using &lt;code&gt;@css&lt;/code&gt; and it will work, how that will help you in your workflow? you&amp;#39;ll be able to integrate Stylus progressivly in your project&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;@css {
    body {
        font-family: Arial, sans-serif;
        font-size: 14px;
        color: #f00;
    }
}

#container
    width 980px
    margin 0 auto
    background #ccc
    font 12px Helvetica, Arial, sans-serif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the output will be&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;body {
    font-family: Arial, sans-serif;
    font-size: 14px;
    color: #f00;
}

#container {
    width: 980px;
    margin: 0 auto;
    background: #ccc;
    font: 12px Helvetica, Arial, sans-serif;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Stylus is certainly worth a try, and if you are a Compass guy, Stylus has an extension called &lt;a href=&#34;https://github.com/visionmedia/nib&#34;&gt;nib&lt;/a&gt; that provides robust cross-browser CSS3 mixins. Sure there is more you can learn about Stylus and there is &lt;a href=&#34;http://learnboost.github.io/stylus/&#34;&gt;docs&lt;/a&gt; for that.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Testing your responsive design with PhantomJS</title>
                <link rel="alternate" href="http://daker.me/2013/07/testing-your-responsive-design-with-phantomjs.html" type="text/html" />
                <id>http://daker.me/2013/07/testing-your-responsive-design-with-phantomjs.html</id>
                <updated>2013-07-13T14:30:00Z</updated>
                
                <summary type="html">User testing is an important aspect of the development process of any web project, that&amp;#39;s why headless browsers can be great for automating and testing web pages programmatically, PhantomJS is one of many headless browsers basicaly a WebKit browser with JavaScript API, which means that the rendered web pages are never actually displayed, just because it is a browser but without a GUI.</summary>
                <content type="html">&lt;p&gt;User testing is an important aspect of the development process of any web project, that&amp;#39;s why headless browsers can be great for automating and testing web pages programmatically, PhantomJS is one of many headless browsers basicaly a WebKit browser with JavaScript API, which means that the rendered web pages are never actually displayed, just because it is a browser but without a GUI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/phantomjs.png&#34; alt=&#34;PhantomJS&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;&lt;h3&gt;Ubuntu&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:chris-lea/node.js
$ sudo apt-get update
$ sudo apt-get install nodejs
$ sudo npm install -g phantomjs
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Mac OSX&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ brew install node
$ curl https://npmjs.org/install.sh | sh
$ npm install -g phantomjs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should now have PhantomJS installed, you check that by running : &lt;code&gt;$ phantomjs --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;PhantomJS is very powerfull tool, it lets you manipulate pages, access page settings(prevent loading images, prevent running Javascript), accessing the filesystem, running Javascript and you can capture webpage, it can be coupled with other testing frameworks(like QUnitJS)&lt;/p&gt;
&lt;h2&gt;Testing your responsive design&lt;/h2&gt;
&lt;p&gt;PhantomJS can capture the content of any webpage in PNG, JPEG, GIF or PDF file, it let&amp;#39;s you set the viewport size, the zoom factor, the user-agent and more usefull stuff.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;/*
    requires: phantomjs, async
    usage: phantomjs capture.js
*/
var async = require(&amp;#39;async&amp;#39;),
    sizes = [
        [320, 480],
        [320, 568],
        [600, 1024],
        [1024, 768],
        [1280, 800],
        [1440, 900]
    ];

function capture(sizes, callback) {
    var page = require(&amp;#39;webpage&amp;#39;).create();
    page.viewportSize = {
        width: sizes[0],
        height: sizes[1]
    };
    page.zoomFactor = 1;
    page.open(&amp;#39;http://daker.me&amp;#39;, function (status) {
        var filename = sizes[0] + &amp;#39;x&amp;#39; + sizes[1] + &amp;#39;.png&amp;#39;;
        page.render(&amp;#39;./screenshots/&amp;#39; + filename);
        page.close();
        callback.apply();
    });
}

async.eachSeries(sizes, capture, function (e) {
    if (e) console.log(e);
    console.log(&amp;#39;done!&amp;#39;);
    phantom.exit();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have coupled PhantomJS with &lt;a href=&#34;https://github.com/caolan/async&#34;&gt;async.js&lt;/a&gt; so i can take multiple screenshots, now all you need to do is to run &lt;code&gt;phantomjs capture.js&lt;/code&gt; from the commandline, the good part is that PhantomJS will capture all the page not only the viewport.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/phantomjs-demo.png&#34; alt=&#34;Responsive Design Screenshots&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE 14/07/2013&lt;/strong&gt; : The script also works with &lt;a href=&#34;http://slimerjs.org/&#34;&gt;SlimerJS&lt;/a&gt;, SlimerJS is similar to PhantomJs, except that it runs Gecko, the browser engine of Mozilla Firefox, instead of Webkit.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;Testing your &lt;a href=&#34;https://twitter.com/search?q=%23responsivedesign&amp;amp;src=hash&#34;&gt;#responsivedesign&lt;/a&gt;? Take this script for PhantomJS and run it with SlimerJS &lt;a href=&#34;http://t.co/wyqiIJustE&#34;&gt;&lt;a href=&#34;http://t.co/wyqiIJustE&#34;&gt;http://t.co/wyqiIJustE&lt;/a&gt;&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/AdnaneBelmadiaf&#34;&gt;@AdnaneBelmadiaf&lt;/a&gt;&lt;/p&gt;&amp;mdash; SlimerJS (@slimerjs) &lt;a href=&#34;https://twitter.com/slimerjs/statuses/356172141277888513&#34;&gt;July 13, 2013&lt;/a&gt;&lt;/blockquote&gt;&lt;br&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2&gt;Mentioned on&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://webuild.envato.com/blog/techniques-for-mobile-and-responsive-cross-browser-testing/&#34;&gt;Envato&lt;/a&gt; - Techniques for mobile and responsive cross-browser testing.&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
        
            <entry>
                <title>Understanding CSS3 box-sizing property</title>
                <link rel="alternate" href="http://daker.me/2013/07/understanding-css3-box-sizing-property.html" type="text/html" />
                <id>http://daker.me/2013/07/understanding-css3-box-sizing-property.html</id>
                <updated>2013-07-10T16:25:00Z</updated>
                
                <summary type="html">Each HTML element is represented as a rectangular box, it consists of margins, borders, padding, and the actual content. The default CSS box model used to calculate widths and heights of elements, the width/height of an element gives the width/height of the content of the box, excluding padding and border.</summary>
                <content type="html">&lt;p&gt;Each HTML element is represented as a rectangular box, it consists of margins, borders, padding, and the actual content. The default CSS box model used to calculate widths and heights of elements, the width/height of an element gives the width/height of the content of the box, excluding padding and border.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/box-model.png&#34; alt=&#34;Box Model&#34;&gt;&lt;/p&gt;

&lt;p&gt;and they are calculated like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Width = width + padding-left + padding-right + border-left + border-right&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Height = height + padding-top + padding-bottom + border-top + border-bottom&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;so if we take this as an example :&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;.box {
    width: 300px;
    padding: 10px;
    border: 5px solid #e9573f;
    margin: 10px;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the width of the rendred box will be calculated like this :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;300px (width) + 20px (left + right padding) + 10px (left + right border) + 20px (left + right margin) = 350px&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which will give us a box with 350px width, so in this case you have to change the width of the box to 270px, and this is where the box-sizing property comes to the rescue.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;box-sizing&lt;/code&gt; allows you to switch box models :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;content-box: This is the default style as specified by the W3C. The width and height properties are measured including only the content, but not the border, margin, or padding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;border-box: The width and height properties include the padding and border, but not the margin. This is the box model used by IE when the document is in Quirks mode.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;padding-box : The width and height properties include the padding size, and do not include the border or margin (only in Firefox).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/ZtLL8/1/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;To save you time, you can apply it using the universal selector&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;* {
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;box-sizing&lt;/code&gt; is pretty well supported but partially and i mean that only Firefox support the three models, the others browsers only support content-box and border-box since the padding-box value has been added to the spec very recently.&lt;/p&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;21.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;26.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;15.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;&gt;&lt;div&gt;8.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;5.1&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;
</content>
            </entry>
        
            <entry>
                <title>How to make sticky elements using position sticky</title>
                <link rel="alternate" href="http://daker.me/2013/07/how-to-make-sticky-elements-using-position-sticky.html" type="text/html" />
                <id>http://daker.me/2013/07/how-to-make-sticky-elements-using-position-sticky.html</id>
                <updated>2013-07-04T01:05:00Z</updated>
                
                <summary type="html">&lt;code&gt;position: sticky&lt;/code&gt; is a new CSS property that has &lt;a href=&#34;http://trac.webkit.org/changeset/126774&#34;&gt;landed&lt;/a&gt; in Webkit last year which will allow elements to stick to the viewport edge as you scroll past, unfortunately this hasn&amp;#39;t been standardized yet but discussions are still going on.</summary>
                <content type="html">&lt;p&gt;&lt;code&gt;position: sticky&lt;/code&gt; is a new CSS property that has &lt;a href=&#34;http://trac.webkit.org/changeset/126774&#34;&gt;landed&lt;/a&gt; in Webkit last year which will allow elements to stick to the viewport edge as you scroll past, unfortunately this hasn&amp;#39;t been standardized yet but discussions are still going on.&lt;/p&gt;
&lt;h2&gt;How does it work ?&lt;/h2&gt;
&lt;p&gt;By simply adding &lt;code&gt;position: sticky&lt;/code&gt;, you can tell an element to be &lt;code&gt;position: relative&lt;/code&gt; until the user scrolls the item (or its parent) to be for ex 10px from the top, the actual way to achieve the same behaviour is by using Javascript :&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsbin.com/omanut/2&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;and this is the CSS way:&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;.sticky {
    position: -webkit-sticky;
    position: -moz-sticky;
    position: -ms-sticky;
    position: -o-sticky;
    position: sticky;
    top: 10px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;How to enable it ?&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;sticky&lt;/code&gt; value is still an experimental feature in Webkit, so you need to enable it in &lt;code&gt;chrome://flags&lt;/code&gt;, just Ctrl+F &amp;quot;Enable experimental WebKit features&amp;quot;, then click enable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/css-sticky.png&#34; alt=&#34;chrome://flags&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Demo&lt;/h2&gt;
&lt;p&gt;I have made a simple alphabetical contact list with sticky headers using HTML and CSS only!&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/ecpTw/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;23.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;7&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;

&lt;p&gt;One thing you should remember is that this feature is just a proposal that can be standardized or not.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Grunt.js takes your workflow to the next level</title>
                <link rel="alternate" href="http://daker.me/2013/06/gruntjs-takes-your-workflow-to-the-next-level.html" type="text/html" />
                <id>http://daker.me/2013/06/gruntjs-takes-your-workflow-to-the-next-level.html</id>
                <updated>2013-06-22T18:15:00Z</updated>
                
                <summary type="html">&lt;a href=&#34;http://gruntjs.com&#34;&gt;Grunt.js&lt;/a&gt; is a powerful task-based command line tool written in JavaScript on top of Node.js, and there are a number of grunt plugins that make it easy to set up common tasks, most common ones are concatenating files, linting, testing and minification.</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;http://gruntjs.com&#34;&gt;Grunt.js&lt;/a&gt; is a powerful task-based command line tool written in JavaScript on top of Node.js, and there are a number of grunt plugins that make it easy to set up common tasks, most common ones are concatenating files, linting, testing and minification.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/grunt-logo.png&#34; alt=&#34;Grunt logo&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;&lt;h3&gt;Ubuntu&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:chris-lea/node.js
$ sudo apt-get update
$ sudo apt-get install nodejs
$ sudo npm install -g grunt-cli
$ sudo npm install grunt --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Mac OSX&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ brew install node
$ curl https://npmjs.org/install.sh | sh
$ npm install -g grunt-cli
$ npm install grunt --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Integration&lt;/h2&gt;
&lt;p&gt;To integrate &lt;a href=&#34;http://gruntjs.com&#34;&gt;Grunt.js&lt;/a&gt; in your project, you just need to add two files, package.json and Gruntfile.js, to the root of your project.&lt;/p&gt;
&lt;h3&gt;package.json&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://nodejs.org&#34;&gt;package.json&lt;/a&gt; file should contain project configurations (project name, version, license, author, etc...), it is always located in project root :&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
  &amp;#34;name&amp;#34; : &amp;#34;example&amp;#34;,
  &amp;#34;version&amp;#34; : &amp;#34;0.0.1&amp;#34;,
  &amp;#34;author&amp;#34;: &amp;#34;Adnane Belmadiaf&amp;#34;,
  &amp;#34;homepage&amp;#34;: &amp;#34;http://daker.me&amp;#34;,
  &amp;#34;devDependencies&amp;#34;: {
    &amp;#34;grunt&amp;#34;: &amp;#34;~0.4.0&amp;#34;,
    &amp;#34;grunt-contrib-concat&amp;#34;: &amp;#34;~0.1.3&amp;#34;,
    &amp;#34;grunt-contrib-uglify&amp;#34;: &amp;#34;~0.1.1&amp;#34;,
    &amp;#34;grunt-contrib-cssmin&amp;#34;: &amp;#34;~0.4.1&amp;#34;,
    &amp;#34;grunt-contrib-jshint&amp;#34;: &amp;#34;~0.1.0&amp;#34;,
    &amp;#34;grunt-contrib-compress&amp;#34;: &amp;#34;~0.3.3&amp;#34;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install Grunt and the plugins you will be using in your project, now all you need to do is running &lt;code&gt;npm install&lt;/code&gt; command in the root folder of the project.&lt;/p&gt;
&lt;h3&gt;Gruntfile.js&lt;/h3&gt;
&lt;p&gt;Gruntfile.js is used to define and configure tasks, and load &lt;a href=&#34;http://gruntjs.com&#34;&gt;Grunt.js&lt;/a&gt; &lt;a href=&#34;http://gruntjs.com/plugins&#34;&gt;plugins&lt;/a&gt;.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;/*global module:false*/
module.exports = function(grunt){
    grunt.registerTask(&amp;#39;hello&amp;#39;, function(){
        console.log(&amp;#34;Hello from the Gruntfile!&amp;#34;);
    });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the Gruntfile.js i use to jshint/concat/cssmin and uglify all my CSS and JS files in one .min.(js|css) file. Sure you can go deeper, you can compile your Less or Sass files, watch files and run tasks whenever they changed and more.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;/*global module:false*/

module.exports = function(grunt) {

  grunt.initConfig({
    pkg: grunt.file.readJSON(&amp;#39;package.json&amp;#39;),
    meta: {
      banner:
        &amp;#39;/*!\n&amp;#39; +
        &amp;#39; * app.js &amp;lt;%= pkg.version %&amp;gt; (&amp;lt;%= grunt.template.today(&amp;#34;yyyy-mm-dd, HH:MM&amp;#34;) %&amp;gt;)\n&amp;#39; +
        &amp;#39; * GNU LGPL v3\n&amp;#39; +
        &amp;#39; */&amp;#39;
    },
    jshint: {
      options: {
        curly: false,
        eqeqeq: true,
        immed: true,
        latedef: true,
        newcap: true,
        noarg: true,
        sub: true,
        undef: true,
        eqnull: true,
        browser: true,
        expr: true,
        globals: {
          head: false,
          module: false,
          console: false
        }
      },
      files: [ &amp;#39;Gruntfile.js&amp;#39;, &amp;#39;js/app.js&amp;#39; ]
    },
    concat: {
      options:{
        separator: &amp;#39;;&amp;#39;
      },
      js: {
        src: [&amp;#39;src/js/*.js&amp;#39;],
        dest: &amp;#39;build/app.js&amp;#39;
      },
      css:{
        src: [&amp;#39;src/css/*.css&amp;#39;],
        dest: &amp;#39;build/app.css&amp;#39;
      }
    },
    uglify: {
      options: {
        banner: &amp;#39;&amp;lt;%= meta.banner %&amp;gt;\n&amp;#39;
      },
      build: {
        src: &amp;#39;&amp;lt;%= concat.js.dest %&amp;gt;&amp;#39;,
        dest: &amp;#39;build/app.min.js&amp;#39;
      }
    },

    cssmin: {
      options: {
            banner: &amp;#39;/*!\n&amp;#39; +
        &amp;#39; * app.min.css &amp;lt;%= pkg.version %&amp;gt; (&amp;lt;%= grunt.template.today(&amp;#34;yyyy-mm-dd, HH:MM&amp;#34;) %&amp;gt;)\n&amp;#39; +
        &amp;#39; * GNU LGPL v3\n&amp;#39; +
        &amp;#39; */&amp;#39;
      },
      compress: {
        files: {
          &amp;#39;build/app.min.css&amp;#39;: [ &amp;#39;&amp;lt;%= concat.css.dest %&amp;gt;&amp;#39; ]
        }
      }
    }
  });

  grunt.loadNpmTasks( &amp;#39;grunt-contrib-jshint&amp;#39; );
  grunt.loadNpmTasks( &amp;#39;grunt-contrib-cssmin&amp;#39; );
  grunt.loadNpmTasks( &amp;#39;grunt-contrib-uglify&amp;#39; );
  grunt.loadNpmTasks( &amp;#39;grunt-contrib-concat&amp;#39; );

  // Default task.
  grunt.registerTask( &amp;#39;default&amp;#39;, [ &amp;#39;jshint&amp;#39;, &amp;#39;concat&amp;#39;, &amp;#39;cssmin&amp;#39;, &amp;#39;uglify&amp;#39; ] );
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all you need to do is to run &lt;code&gt;grunt&lt;/code&gt; from the commandline to run the default task or run &lt;code&gt;grunt task-alias&lt;/code&gt; to run a specific task.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://gruntjs.com&#34;&gt;Grunt.js&lt;/a&gt; is definetely the way to go, so make sure to take some time to try it and you&amp;#39;ll be supprised how it’s easy get started to work with.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Pocket TV turns any TV into an Android smart TV</title>
                <link rel="alternate" href="http://daker.me/2013/06/pocket-tv-turns-any-tv-into-an-android-smart-tv.html" type="text/html" />
                <id>http://daker.me/2013/06/pocket-tv-turns-any-tv-into-an-android-smart-tv.html</id>
                <updated>2013-06-16T16:15:00Z</updated>
                
                <summary type="html">Last Wednesday i got my Pocket TV or PTV from &lt;a href=&#34;https://infinitec.com&#34;&gt;infinitec&lt;/a&gt;, a small pocket-sized dongle that connects to the HDMI port of any regular TV and converts it into a powerful Android Smart TV, it can also be controlled by Android mobile devices using the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.tvremote&#34;&gt;Google TV Remote&lt;/a&gt; app or using there own &lt;a href=&#34;http://infinitec.com/forum/viewtopic.php?f=2&amp;amp;t=605&#34;&gt;remote app&lt;/a&gt; which is still in beta.</summary>
                <content type="html">&lt;p&gt;Last Wednesday i got my Pocket TV or PTV from &lt;a href=&#34;https://infinitec.com&#34;&gt;infinitec&lt;/a&gt;, a small pocket-sized dongle that connects to the HDMI port of any regular TV and converts it into a powerful Android Smart TV, it can also be controlled by Android mobile devices using the &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.android.apps.tvremote&#34;&gt;Google TV Remote&lt;/a&gt; app or using there own &lt;a href=&#34;http://infinitec.com/forum/viewtopic.php?f=2&amp;amp;t=605&#34;&gt;remote app&lt;/a&gt; which is still in beta.&lt;/p&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;1 GHz ARM Cortex A9 Processor&lt;/li&gt;
&lt;li&gt;Mali-400MP Graphics Processor&lt;/li&gt;
&lt;li&gt;1 GB RAM&lt;/li&gt;
&lt;li&gt;8 GB internal storage (expandable via MicroSD up to 32GB)&lt;/li&gt;
&lt;li&gt;WiFi 802.11 b/g/n&lt;/li&gt;
&lt;li&gt;Bluetooth supported via external USB Bluetooth Connector&lt;/li&gt;
&lt;li&gt;USB 2.0 Power&lt;/li&gt;
&lt;li&gt;Mini USB port Memory&lt;/li&gt;
&lt;li&gt;HDMI 1.3 (Video and Audio)&lt;/li&gt;
&lt;li&gt;Dimensions: 86 x 31 x 14 mm&lt;/li&gt;
&lt;li&gt;Weight: 35 grams&lt;/li&gt;
&lt;li&gt;Runs Android 4.0 ICS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The packaging is good looking, clean and neat&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ptv.jpg&#34; alt=&#34;Pocket TV&#34;&gt;&lt;/p&gt;

&lt;p&gt;What&amp;#39;s in the box :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Infintec Android Pocket TV (Black)&lt;/li&gt;
&lt;li&gt;Quick Start Guide&lt;/li&gt;
&lt;li&gt;Air Remote&lt;/li&gt;
&lt;li&gt;Infared Remote&lt;/li&gt;
&lt;li&gt;Infared Receiver&lt;/li&gt;
&lt;li&gt;HDMI extender cable&lt;/li&gt;
&lt;li&gt;MiniUSB Power Cable&lt;/li&gt;
&lt;li&gt;Power Adapter EU/US&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;The setup was easy and it took me about 5min, i plugged the PTV into my LG 22-Inch Widescreen 1080p HDMI port, connected the USB cable to the TV USB port. Booting took about 35 seconds, once booter i had the setup guide, for language, Wifi and TV resolution.&lt;/p&gt;
&lt;h2&gt;Air Remote&lt;/h2&gt;
&lt;p&gt;The Air Remote comes with a built-in gyroscope for a motion controller nav also it has a built-in QWERTY thumb keyboard for entering text. and a USB bluetooth Receiver that you have to plug in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ptv-air.jpg&#34; alt=&#34;Air Remote&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Infrared Remote&lt;/h2&gt;
&lt;p&gt;The IR remote is really light, uses standard infrared signals and gives the ability to control the PTV using basic buttons, directional arrows, browser button, home, back, volume up/down, search and a power off button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ptv-ir.jpg&#34; alt=&#34;Infrared Remote&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Apps&lt;/h2&gt;
&lt;p&gt;The pre-installed Android ICS operating system comes with some preinstalled apps like Gmail, Youtube, Browser, an app installer, a filebrowser, Gtalk (Hangout after ther upgrade), a movie player and musicplayer. It provides access to Google Play store with thousands of android apps.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/p-S1JBgBKLI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
</content>
            </entry>
        
            <entry>
                <title>5 CSS3 features explained</title>
                <link rel="alternate" href="http://daker.me/2013/06/5-css3-features-explained.html" type="text/html" />
                <id>http://daker.me/2013/06/5-css3-features-explained.html</id>
                <updated>2013-06-09T15:45:00Z</updated>
                
                <summary type="html">CSS3 is one of the coolest new web technologies available to front-end developers right now, overtime we have seen so many features that generally were implemented via &lt;a href=&#34;http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html&#34;&gt;JavaScript&lt;/a&gt;, can now be acheived with a few lines of CSS.&lt;br&gt;
So in this post i will explain to you five features that will save you time and energy.</summary>
                <content type="html">&lt;p&gt;CSS3 is one of the coolest new web technologies available to front-end developers right now, overtime we have seen so many features that generally were implemented via &lt;a href=&#34;http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html&#34;&gt;JavaScript&lt;/a&gt;, can now be acheived with a few lines of CSS.&lt;br&gt;
So in this post i will explain to you five features that will save you time and energy.&lt;/p&gt;
&lt;h2&gt;Flexible boxes&lt;/h2&gt;
&lt;p&gt;The CSS3 Flexible Box, better known as Flexbox enables you to create complex layouts with only a few lines of code.&lt;br&gt;
How many time you wanted to vertically center a div ? how many time you wanted to create a 3 columns layout with 2 fluid columns and one fixed ? here is how to do it — with CSS only&lt;/p&gt;
&lt;h3&gt;Vertical centering of a div&lt;/h3&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/NnkHF/30/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;
&lt;h3&gt;Fixed-Fluid-Fixed Layout&lt;/h3&gt;
&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/GWZzd/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;As you can see this will allow you to make other layouts(Fluid-Fluid-Fixed, Fluid-Fixed-Fixed, etc...), easy no ?&lt;/p&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;20.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;26.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;12.1&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;&gt;&lt;div&gt;10.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;5.1&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;
&lt;h2&gt;:nth-child&lt;/h2&gt;
&lt;p&gt;:nth-child is a CSS pseudo-class which allows you to select elements with a formula &lt;code&gt;:nth-child(n)&lt;/code&gt;. The pseudo-class accepts an argument, n, which can be a keyword, a number or a number expression of the form an+b.&lt;/p&gt;

&lt;p&gt;A good use case is displaying a zebra striping table without using extra CSS classes, JavaScript, or server-side code using the modulo, only CSS hein ?&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/uc2Kv/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;There is also &lt;code&gt;:nth-of-type&lt;/code&gt; it works the same way , except that it only considers element of the given type.&lt;/p&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;3.5&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;4.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;9.5&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;&gt;&lt;div&gt;9.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;3.2&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;
&lt;h2&gt;CSS Hyphenation&lt;/h2&gt;
&lt;p&gt;The hyphens CSS property tells the browser how to go about splitting words to improve the layout of text when line-wrapping. On HTML, the language is determined by the lang attribute: browsers will hyphenate only if this attribute is present and if an appropriate hyphenation dictionary is available. On XML, the xml:lang attribute must be used.&lt;/p&gt;

&lt;p&gt;Source &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/hyphens&#34;&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/8w9bn/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;NB: To see the result you need to try to resize the window of your demo.&lt;/p&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;6.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;13.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;&gt;&lt;div&gt;10.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;5.1&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;
&lt;h2&gt;CSS Filter Effects&lt;/h2&gt;
&lt;p&gt;Filters are a powerful tool, they can manipulate the appearance of any HTML element and can be stacked together to create unique effects and provide endless of possibilities, such as grayscale, sepia, saturation, opacity, and blurs. The &lt;code&gt;filter&lt;/code&gt; property creates a hardware-accelerated effects using the GPU.&lt;/p&gt;

&lt;iframe width=&#34;100%&#34; height=&#34;300&#34; src=&#34;http://jsfiddle.net/daker/qZdmS/embedded/result,css,html&#34; allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;18.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;15.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;  class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;6.0&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;
&lt;h2&gt;CSS3 Media Queries&lt;/h2&gt;
&lt;p&gt;CSS3 Media queries allow you to target CSS rules based on screen size, device-orientation or display-density, you can add expressions to media type to check for certain conditions, this is the technique used for the so called &amp;quot;Responsive design&amp;quot;.&lt;/p&gt;
&lt;pre lang=&#34;css&#34;&gt;&lt;code&gt;/* The following CSS will apply if the viewing area is smaller than 600px. */
@media screen and (max-width: 600px) {
    .class {
        background: #ccc;
    }
}

/* The following CSS will apply if the viewing area is 700px wide or wider and the display is in landscape mode. */
@media screen and (min-width: 700px) and (orientation: landscape) {
    .class {
        background: #ccc;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also apply css rules based on media types &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;tv&lt;/code&gt; or &lt;code&gt;handheld&lt;/code&gt;, you can find the list &lt;a href=&#34;http://www.w3.org/TR/CSS2/media.html#media-types&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;20.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;26.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;12.1&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;&gt;&lt;div&gt;9.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;5.1&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;

&lt;p&gt;Let me know your thoughts in the comments below, also you can discuss, upvote this post over at &lt;a href=&#34;https://news.ycombinator.com/item?id=5849053&#34;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>5 HTML5 Javascript APIs to keep an eye on</title>
                <link rel="alternate" href="http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html" type="text/html" />
                <id>http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html</id>
                <updated>2013-06-02T17:30:00Z</updated>
                
                <summary type="html">In my &lt;a href=&#34;http://daker.me/2013/05/5-html5-features-you-need-to-know.html&#34;&gt;last post&lt;/a&gt;, i have talked about HTML5 APIs, so thought it will also interesting to write about some new &lt;strike&gt;old&lt;/strike&gt; JavaScript APIs. Since CSS has been improving over the time and today you can achieve what was only done with Javascript with CSS only, on the other side Javascript have to improve and follow the evolution, so today Javascript can do a lot of things, like accessing hardware(camera, microphone, gamepad, GPU), accessing the filesystem and websocket.</summary>
                <content type="html">&lt;p&gt;In my &lt;a href=&#34;http://daker.me/2013/05/5-html5-features-you-need-to-know.html&#34;&gt;last post&lt;/a&gt;, i have talked about HTML5 APIs, so thought it will also interesting to write about some new &lt;strike&gt;old&lt;/strike&gt; JavaScript APIs. Since CSS has been improving over the time and today you can achieve what was only done with Javascript with CSS only, on the other side Javascript have to improve and follow the evolution, so today Javascript can do a lot of things, like accessing hardware(camera, microphone, gamepad, GPU), accessing the filesystem and websocket.&lt;/p&gt;
&lt;h2&gt;Battery Status API&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.w3.org/TR/battery-status/&#34;&gt;Battery Status API&lt;/a&gt; allows any webpage to inspect the state of the device&amp;#39;s (Laptop, phone or tablet) battery through javascript :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var battery = navigator.battery || navigator.webkitBattery || navigator.mozBattery

console.log(&amp;#34;Battery charging: &amp;#34;, battery.charging); // true
console.log(&amp;#34;Battery level: &amp;#34;, battery.level); // 0.58
console.log(&amp;#34;Battery discharging time: &amp;#34;, battery.dischargingTime);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see you need to do more checks to make your code cross-browser compatible, i have done some researches and i have found &lt;a href=&#34;https://github.com/pstadler/battery.js/&#34;&gt;battery.js&lt;/a&gt; a tiny wrapper for the Battery Status API :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;if(Battery.isSupported()) {
    // Get the battery status
    var status = Battery.getStatus();
    console.log(&amp;#39;Level: &amp;#39; + Math.floor(status.level * 100) + &amp;#39;%&amp;#39;); // 30%
    console.log(&amp;#39;Charging: &amp;#39; + status.charging);                   // true
    console.log(&amp;#39;Time until charged: &amp;#39; + status.chargingTime);     // 3600 (seconds) or Infinity
    console.log(&amp;#39;Battery time left: &amp;#39; + status.dischargingTime);   // 3600 (seconds) or Infinity

    // Register a handler to get notified when battery status changes
    Battery.onUpdate = function(status) {
        console.log(status); // {level, charging, chargingTime, dischargingTime}
    };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;16.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;19&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;
&lt;h2&gt;Gamepad API&lt;/h2&gt;
&lt;p&gt;Gamepad API allows you to connect your console gamepad into your computer and use it for browser based games. With the increase in popularity of HTML5 games this API will have a prominent future.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;navigator.gamepads = navigator.webkitGamepads || navigator.MozGamepads;

var requestAnimationFrame = window.webkitRequestAnimationFrame ||
                            window.mozRequestAnimationFrame;
var cancelAnimationFrame = window.webkitCancelAnimationFrame ||
                           window.MozCancelAnimationFrame;

var controllers = {}; // Stash connected controllers.
var reqId = null;

function onConnected(e) {
    controllers[e.gamepad.index] = e.gamepad;
    runAnimation();
}

function onDisconnected(e) {
    delete controllers[e.gamepad.index];
    cancelAnimationFrame(reqId);
}

window.addEventListener(&amp;#39;webkitgamepadconnected&amp;#39;, onConnected, false);
window.addEventListener(&amp;#39;webkitgamepaddisconnected&amp;#39;, onDisconnected, false);

window.addEventListener(&amp;#39;MozGamepadDisconnected&amp;#39;, onDisconnected, false);
window.addEventListener(&amp;#39;MozGamepadConnected&amp;#39;, onConnected, false);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source : &lt;a href=&#34;https://html5-demos.appspot.com/static/html5-therealbleedingedge/template/index.html#27&#34;&gt;The Edge of HTML5&lt;/a&gt;&lt;/p&gt;

&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;3.6&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;21&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;

&lt;p&gt;There is a library called &lt;a href=&#34;http://www.gamepadjs.com/&#34;&gt;gamepadjs&lt;/a&gt;, which will let you use this API very easily.&lt;/p&gt;
&lt;h2&gt;Device Orientation API&lt;/h2&gt;
&lt;p&gt;Using device orientation, you can determine the orientation of the device as well as gather information about its movement (alpha, beta and gamma).&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/deviceorientation.png&#34; alt=&#34;Source html5rocks.com&#34;&gt;&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;if (window.DeviceOrientationEvent) {
    window.addEventListener(&amp;#39;deviceorientation&amp;#39;, function(event) {
        var a = event.alpha,
            b = event.beta,
            g = event.gamma;
        console.log(&amp;#39;Orientation - Alpha: &amp;#39; + a + &amp;#39;, Beta: &amp;#39;+ b + &amp;#39;, Gamma: &amp;#39; + g);
    }, false);
} else {
    console.log(&amp;#39;This device does not support deviceorientation&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;3.6&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;7.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;15.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;

&lt;p&gt;To use this feature your device must have gyroscope capabilities, more about browser support can be found on &lt;a href=&#34;http://caniuse.com/deviceorientation&#34;&gt;caniuse.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Geolocation API&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;http://dev.w3.org/geo/api/&#34;&gt;Geolocation API&lt;/a&gt; lets you share your location with trusted web sites. The latitude and longitude are available to JavaScript on the page, which in turn can send it back to the remote web server and do fancy location-aware things like finding local businesses or showing your location on a map, it can be also used for &amp;quot;geo-tagging&amp;quot; user&amp;#39;s content like photos.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
        var lat = position.coords.latitude,
            lon = position.coords.longitude;
        console.log(&amp;#39;Geolocation - Latitude: &amp;#39;+ lat +&amp;#39;, Longitude: &amp;#39;+ lon);
    });
}
else {
    console.log(&amp;#39;Geolocation is not supported for this Browser/OS version yet.&amp;#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;3.5&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;5.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;10.6&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;&gt;&lt;div&gt;9.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34;&gt;&lt;div&gt;5.0&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;

&lt;p&gt;More about browser support can be found on &lt;a href=&#34;http://caniuse.com/geolocation&#34;&gt;caniuse.com&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Page Visibility API&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.w3.org/TR/page-visibility/&#34;&gt;Page Visibility API&lt;/a&gt; let&amp;#39;s you determine if your page is visible or not, when you minimise the page or move to another tab, a visibilitychange event is triggered, this can be very useful if you are a game developer this will allow you to pause the game when the user change the page.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;document.addEventListener(&amp;#39;visibilitychange&amp;#39;, function(e) {
    console.log(&amp;#39;hidden:&amp;#39; + document.hidden,
              &amp;#39;state:&amp;#39; + document.visibilityState)
}, false);
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;browser-support&#34;&gt;
    &lt;dfn title=&#34;firefox&#34;&gt;&lt;div&gt;10.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;chrome&#34;&gt;&lt;div&gt;14.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;opera&#34;&gt;&lt;div&gt;12.1&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;ie&#34;&gt;&lt;div&gt;10.0&lt;/div&gt;&lt;/dfn&gt;
    &lt;dfn title=&#34;safari&#34; class=&#34;unsupported&#34;&gt;&lt;div&gt;—&lt;/div&gt;&lt;/dfn&gt;
&lt;/div&gt;

&lt;p&gt;More about browser support can be found on &lt;a href=&#34;http://caniuse.com/pagevisibility&#34;&gt;caniuse.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let me know your thoughts in the comments below, also you can discuss, upvote this post over at &lt;a href=&#34;https://news.ycombinator.com/item?id=5809719&#34;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>5 Sublime Text 2 packages to enhance your frontend development workflow</title>
                <link rel="alternate" href="http://daker.me/2013/05/5-sublimetext2-packages-to-enhance-your-frontend-development-workflow.html" type="text/html" />
                <id>http://daker.me/2013/05/5-sublimetext2-packages-to-enhance-your-frontend-development-workflow.html</id>
                <updated>2013-05-28T23:45:00Z</updated>
                
                <summary type="html">Sublime Text 2 is a lightweight, cross platform, blazing fast text editor with chrome-like tabs and split window layouts, it works for both web development and software development.</summary>
                <content type="html">&lt;p&gt;Sublime Text 2 is a lightweight, cross platform, blazing fast text editor with chrome-like tabs and split window layouts, it works for both web development and software development.&lt;/p&gt;

&lt;p&gt;Sublime Text has got a wide range of open source plugins with a massive community of plugin developers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/sublime.png&#34; alt=&#34;Sublime Text 2&#34;&gt;&lt;/p&gt;

&lt;p&gt;For my frontend development workflow i use some plugins with a specific user settings and sure the wonderfull &lt;a href=&#34;https://github.com/buymeasoda/soda-theme&#34;&gt;Soda theme&lt;/a&gt; by &lt;a href=&#34;https://github.com/buymeasoda&#34;&gt;Ian Hill&lt;/a&gt;, so here’s &lt;a href=&#34;https://gist.github.com/daker/5665850&#34;&gt;my settings file&lt;/a&gt;:&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
    &amp;#34;auto_complete&amp;#34;: false,
    &amp;#34;caret_style&amp;#34;: &amp;#34;phase&amp;#34;,
    &amp;#34;close_windows_when_empty&amp;#34;: false,
    &amp;#34;color_scheme&amp;#34;: &amp;#34;Packages/Tomorrow Color Schemes/Tomorrow-Night.tmTheme&amp;#34;,
    &amp;#34;draw_white_space&amp;#34;: &amp;#34;all&amp;#34;,
    &amp;#34;find_selected_text&amp;#34;: true,
    &amp;#34;fold_buttons&amp;#34;: false,
    &amp;#34;folder_exclude_patterns&amp;#34;:
    [
        &amp;#34;.svn&amp;#34;,
        &amp;#34;.git&amp;#34;,
        &amp;#34;.hg&amp;#34;,
        &amp;#34;CVS&amp;#34;,
        &amp;#34;_build&amp;#34;,
        &amp;#34;dist&amp;#34;,
        &amp;#34;build&amp;#34;,
        &amp;#34;site&amp;#34;
    ],
    &amp;#34;font_face&amp;#34;: &amp;#34;Ubuntu Mono&amp;#34;,
    &amp;#34;font_options&amp;#34;:
    [
        &amp;#34;subpixel_antialias&amp;#34;
    ],
    &amp;#34;font_size&amp;#34;: 12.0,
    &amp;#34;highlight_line&amp;#34;: true,
    &amp;#34;ignored_packages&amp;#34;:
    [
        &amp;#34;Vintage&amp;#34;
    ],
    &amp;#34;rulers&amp;#34;:
    [
        72,
        79
    ],
    &amp;#34;theme&amp;#34;: &amp;#34;Soda Dark.sublime-theme&amp;#34;,
    &amp;#34;translate_tabs_to_spaces&amp;#34;: true,
    &amp;#34;trim_trailing_white_space_on_save&amp;#34;: true
}

&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Package Control&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://wbond.net/sublime_packages/package_control/&#34;&gt;Package Control&lt;/a&gt; is one of my favorite plugins, it allows users to manage packages very easily, with one shortcut you have access to a long list of plugins available to install and update is automaticly handled. To install it open the console View-&amp;gt;Show Console, then paste the following code :&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;import urllib2,os; pf=&amp;#39;Package Control.sublime-package&amp;#39;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&amp;#39;wb&amp;#39;).write(urllib2.urlopen(&amp;#39;http://sublime.wbond.net/&amp;#39;+pf.replace(&amp;#39; &amp;#39;,&amp;#39;%20&amp;#39;)).read()); print(&amp;#39;Please restart Sublime Text to finish installation&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use it simply invoke the command palette using ctrl+shift+p or ⌘+shift+p then type &amp;quot;install&amp;quot; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/sublime-palette.png&#34; alt=&#34;Sublime Text 2 command palette&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Sublime Linter&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter&#34;&gt;Sublime Linter&lt;/a&gt; is the Swiss knife of code linting, it highlights potential errors in your code depending on the language you are using.&lt;/p&gt;
&lt;h2&gt;LiveReload&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dz0ny/LiveReload-sublimetext2&#34;&gt;LiveReload&lt;/a&gt; can help you to save a lot time, you don&amp;#39;t need to hit refresh in your browser each time you want to test, everything will be done automatically when you save your file.&lt;/p&gt;
&lt;h2&gt;Prefixr&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://wbond.net/sublime_packages/prefixr&#34;&gt;Prefixr&lt;/a&gt; runs your CSS through the &lt;a href=&#34;http://prefixr.com/&#34;&gt;Prefixr&lt;/a&gt; API to make it Cross-Browser.&lt;/p&gt;
&lt;h2&gt;Sidebar Enhancements&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/titoBouzout/SideBarEnhancements&#34;&gt;Sidebar Enhancements&lt;/a&gt; Makes the sidebar more user friendly and improves its usability by adding more options to it. You can delete files and open files using certain programs like Photoshop. giving you more options on new files, moving files, copying files and opening files in another program.&lt;/p&gt;
&lt;h2&gt;Emmet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sergeche/emmet-sublime&#34;&gt;Emmet (ex Zen Coding)&lt;/a&gt; - With this plugin you will see the &amp;quot;Valentino Rossi&amp;quot; on you, this will bring hight-speed development process in your HTML and CSS.&lt;/p&gt;
&lt;h2&gt;Bonus&lt;/h2&gt;
&lt;p&gt;Here are some useful Keyboard shortcuts to remember :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  ctrl+d Select the next occurrence of the selected word&lt;/li&gt;
&lt;li&gt;  ctrl+k, ctrl+b - Toggle the sidebar&lt;/li&gt;
&lt;li&gt;  f11 - Toggle Full Screen&lt;/li&gt;
&lt;li&gt;  shift+f11 - Toggle Distraction Free (this one is my &lt;strong&gt;favorite&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;  alt+. - Close Tag&lt;/li&gt;
&lt;li&gt;  ctrl+p - Show the go to overlay panel&lt;/li&gt;
&lt;li&gt;  ctrl+shift+p - Show the command overlay panel&lt;/li&gt;
&lt;li&gt;  ctrl+alt+p - Show the project selector panel&lt;/li&gt;
&lt;li&gt;  ctrl+r - Show the go to overlay panel default to method selector&lt;/li&gt;
&lt;li&gt;  ctrl+g - Show the go to overlay panel default to go to line selector&lt;/li&gt;
&lt;li&gt;  ctrl+; - Show the go to overlay panel default to variable selector&lt;/li&gt;
&lt;li&gt;  ctrl+shift+up - Swap with the line above&lt;/li&gt;
&lt;li&gt;  ctrl+shift+down - Swap with the line below&lt;/li&gt;
&lt;li&gt;  ctrl+/ - Toggle a comment&lt;/li&gt;
&lt;li&gt;  ctrl+shift+/ - Toggle a comment block&lt;/li&gt;
&lt;li&gt;  ctrl+shift+d - Duplicate a line&lt;/li&gt;
&lt;li&gt;  ctrl+` - Display console panel&lt;/li&gt;
&lt;li&gt;  ctrl+space - Auto complete the current selected snippet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope this will help you with your development workflow, let me know your thoughts and what plugins you use in the comments below.&lt;/p&gt;

&lt;p&gt;You can discuss, upvote this post over at &lt;a href=&#34;https://news.ycombinator.com/item?id=5785243&#34;&gt;Hacker News&lt;/a&gt; or on &lt;a href=&#34;http://www.reddit.com/r/webdev/comments/1f8anb/5_sublime_text_2_packages_to_enhance_your/&#34;&gt;/r/webdev&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>5 HTML5 Features you need to know</title>
                <link rel="alternate" href="http://daker.me/2013/05/5-html5-features-you-need-to-know.html" type="text/html" />
                <id>http://daker.me/2013/05/5-html5-features-you-need-to-know.html</id>
                <updated>2013-05-25T19:00:00Z</updated>
                
                <summary type="html">HTML5 has been around for a while now, it introduces lots of new and exciting new JavaScript and HTML APIs for both mobile and desktop, so in this post you will discover some HTML5 features that will enhance your web apps and will save you a lot of time.</summary>
                <content type="html">&lt;p&gt;HTML5 has been around for a while now, it introduces lots of new and exciting new JavaScript and HTML APIs for both mobile and desktop, so in this post you will discover some HTML5 features that will enhance your web apps and will save you a lot of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/html5-logo.png&#34; alt=&#34;HTML5 logo&#34;&gt;&lt;/p&gt;
&lt;h2&gt;DNS Prefetching&lt;/h2&gt;
&lt;p&gt;DNS hostname resolution is one of the issues that can make any website slow. Modern browsers start to be very smart when it comes to DNS resolution, they try to resolve domain names then cache them before the user tries to follow any link on the webpage.&lt;/p&gt;

&lt;p&gt;With the dns-prefetch feature you are allowed to manually control this operation by telling the browser which domain names to resolve :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;link rel=&amp;#34;dns-prefetch&amp;#34; href=&amp;#34;//fonts.googleapis.com&amp;#34;&amp;gt;
&amp;lt;link rel=&amp;#34;dns-prefetch&amp;#34; href=&amp;#34;//google-analytics.com&amp;#34;&amp;gt;
&amp;lt;link rel=&amp;#34;dns-prefetch&amp;#34; href=&amp;#34;//www.google-analytics.com&amp;#34;&amp;gt;
&amp;lt;link rel=&amp;#34;dns-prefetch&amp;#34; href=&amp;#34;//platform.twitter.com&amp;#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Link Prefetching&lt;/h2&gt;
&lt;p&gt;Link prefetching allows developers to specify pages or assets they want to silently preload once the page load, like loading the first search results :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;link rel=&amp;#34;prefetch&amp;#34; href=&amp;#34;http://daker.me/2013/05/hello-world.html&amp;#34; /&amp;gt;
&amp;lt;link rel=&amp;#34;prefetch&amp;#34; href=&amp;#34;http://daker.me/assets/images/avatar.png&amp;#34; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also you can use the &lt;a href=&#34;https://developers.google.com/chrome/whitepapers/prerender&#34;&gt;prerendering&lt;/a&gt; feature which will make your website even faster, the browser will fetch and render the entire next page on the background and show it only when the user click on the link :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;link rel=&amp;#34;prerender&amp;#34; href=&amp;#34;http://daker.me/2013/05/hello-world.html&amp;#34; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;iframe width=&#34;780&#34; height=&#34;439&#34; src=&#34;http://www.youtube.com/embed/_Jn93FDx9oI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h2&gt;Download Attribute&lt;/h2&gt;
&lt;p&gt;The HTML5 download attribute allows developers to force a file to download rather than go to that specific page, you no longer need to rely on server side code to do that :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;a href=&amp;#34;download_pdf.php?id=15&amp;#34; download=&amp;#34;myfile.pdf&amp;#34;&amp;gt;Download PDF&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Regular Expressions&lt;/h2&gt;
&lt;p&gt;I know you&amp;#39;ll fall in love with this feature, no more js &lt;strike&gt;or a server side&lt;/strike&gt; code to check if the user&amp;#39;s input is a valid email or url adress, with the pattern attribute you can use regular expressions directly :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;input type=&amp;#34;email&amp;#34; pattern=&amp;#34;[^ @]*@[^ @]*&amp;#34; value=&amp;#34;&amp;#34;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Datalist Element&lt;/h2&gt;
&lt;p&gt;Datalist element is a litle big addition, no more use of jQuery plugins for autocomplete inputs combined with a server side code that hit the database on each user keystroke :&lt;/p&gt;
&lt;pre lang=&#34;html&#34;&gt;&lt;code&gt;&amp;lt;form action=&amp;#34;form.php&amp;#34; method=&amp;#34;post&amp;#34;&amp;gt;
    &amp;lt;input list=&amp;#34;cars&amp;#34; name=&amp;#34;cars&amp;#34; &amp;gt;
    &amp;lt;datalist id=&amp;#34;cars&amp;#34;&amp;gt;
        &amp;lt;option value=&amp;#34;Volvo&amp;#34;&amp;gt;
        &amp;lt;option value=&amp;#34;BMW&amp;#34;&amp;gt;
        &amp;lt;option value=&amp;#34;Bugatti&amp;#34;&amp;gt;
        &amp;lt;option value=&amp;#34;Cadillac&amp;#34;&amp;gt;
        &amp;lt;option value=&amp;#34;Chevrolet&amp;#34;&amp;gt;
        &amp;lt;option value=&amp;#34;Chrysler&amp;#34;&amp;gt;
    &amp;lt;/datalist&amp;gt;
    &amp;lt;input type=&amp;#34;submit&amp;#34; /&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope this will help you save time and enhance you coding skills, let me know your thoughts in the comments below.&lt;/p&gt;

&lt;p&gt;You can discuss, upvote this post over at &lt;a href=&#34;https://news.ycombinator.com/item?id=5768174&#34;&gt;Hacker News&lt;/a&gt; or on &lt;a href=&#34;http://www.reddit.com/r/html5/comments/1f1sd6/5_html5_features_you_need_to_know/&#34;&gt;/r/html5&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
        
            <entry>
                <title>Hello World</title>
                <link rel="alternate" href="http://daker.me/2013/05/hello-world.html" type="text/html" />
                <id>http://daker.me/2013/05/hello-world.html</id>
                <updated>2013-05-22T23:55:00Z</updated>
                
                <summary type="html">Hello World! I’ve been wanting a to start my own blog for a while now. Time and other constraints have been preventing me, but I finally sat down over the last week-end and hacked together what you actually see.</summary>
                <content type="html">&lt;p&gt;Hello World! I’ve been wanting a to start my own blog for a while now. Time and other constraints have been preventing me, but I finally sat down over the last week-end and hacked together what you actually see.&lt;/p&gt;

&lt;p&gt;It’s all handwritten in &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt;, generated by &lt;a href=&#34;http://mynt.mirroredwhite.com&#34;&gt;mynt&lt;/a&gt;, and powered by &lt;a href=&#34;http://pages.github.com&#34;&gt;Github pages&lt;/a&gt;, with commenting by &lt;a href=&#34;http://disqus.com/&#34;&gt;Disqus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have decided to license the content of this website under a Creative Commons license; CC-BY-SA 3.0 Unported, to be exact. This means that you can take what I will write on this blog, reuse it for whatever you see fit, or combine it with other content under the same license, e.g. from Wikipedia. The only requirements are that :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you quote where you got it from, i.e. from me (Adnane Belmadiaf) and this website (&lt;a href=&#34;http://daker.me&#34;&gt;daker.me&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;you share the result under the same license&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So feel free to leave a comment or tweet me &lt;a href=&#34;https://twitter.com/AdnaneBelmadiaf&#34;&gt;@AdnaneBelmadiaf&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
        
    </feed>
