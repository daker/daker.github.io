<?xml version="1.0" encoding="UTF-8"?>

    <feed xmlns="http://www.w3.org/2005/Atom">
        <title>Adnane Belmadiaf's Blog</title>
        
        <link rel="alternate" href="http://daker.me/" />
        <link rel="self" href="http://daker.me/feed-ubuntuplanet.xml" type="application/atom+xml" />
        <id>http://daker.me/</id>
        <updated>2014-01-14T22:18:24Z</updated>

        <author>
            <name>Adnane Belmadiaf</name>
            <email>daker@ubuntu.com</email>
            <uri>http://daker.me/</uri>
        </author>

        
            
            <entry>
                <title>How to use the Built-in Screen Recording in Android 4.4 KitKat</title>
                <link rel="alternate" href="http://daker.me/2014/01/how-to-use-the-built-in-screen-recording-in-android-4.4-kitkat.html" type="text/html" />
                <id>http://daker.me/2014/01/how-to-use-the-built-in-screen-recording-in-android-4.4-kitkat.html</id>
                <updated>2014-01-11T20:30:00Z</updated>

                <summary type="html">Android 4.4 KitKat now supports screen recording, it&amp;#39;s only accessible via an ADB command on unrooted devices a. This featues is really a great way to create walkthroughs, tutorials for apps and also perfect for reporting bugs.</summary>
                <content type="html">&lt;p&gt;Android 4.4 KitKat now supports screen recording, it&amp;#39;s only accessible via an ADB command on unrooted devices a. This featues is really a great way to create walkthroughs, tutorials for apps and also perfect for reporting bugs.&lt;/p&gt;

&lt;p&gt;&lt;video controls autoplay width=&#34;350&#34; height=&#34;500&#34;&gt;&lt;br&gt;
  &lt;source src=&#34;http://daker.me/assets/posts/android4.4/recording.mp4&#34; type=&#34;video/mp4&#34;&gt;&lt;br&gt;
&lt;/video&gt;&lt;/p&gt;

&lt;p&gt;To start using it you need to install ADB, you can use the phablet-team PPA if you are using Ubuntu which has the tools and dependencies for 12.04, 12.10, 13.04 and 13.10 to get everything setup, if not you can download the Android SDK from the &lt;a href=&#34;https://developer.android.com/sdk/index.html&#34;&gt;Android developer site&lt;/a&gt;&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:phablet-team/tools
$ sudo apt-get update
$ sudo apt-get install android-tools-adb
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Enable Developer Mode&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go to the settings menu, and scroll down to &amp;quot;About phone.&amp;quot; Tap on it.&lt;/li&gt;
&lt;li&gt;Scroll down to the bottom, where you see &amp;quot;Build number.&amp;quot;&lt;/li&gt;
&lt;li&gt;Tap on it seven (7) times.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Enable the USB debugging&lt;/h2&gt;
&lt;p&gt;Once done hit the Back button, youl&amp;#39;ll see an new entry called &amp;quot;Developer Options&amp;quot; just above the &amp;quot;About phone.&amp;quot; entry, tap on it, scroll down to the debugging section, then enable USB debugging, note that you’ve to confirm the security prompt on your device :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/android4.4/usb-debugging.png&#34; alt=&#34;USB debugging&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/android4.4/usb-debugging2.png&#34; alt=&#34;Security Question&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Using the Screen Recording&lt;/h2&gt;
&lt;p&gt;Once done, you need to make sure that your device is listed &amp;amp; connected using :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ adb devices
List of devices attached
xxxxxxxxxxxxxxxx  device
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then all you have to do is :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ adb shell screenrecord /sdcard/recording.mp4 &amp;amp;&amp;amp; adb pull /sdcard/recording.mp4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The default and maximum duration of a screenrecord is 3 minutes, you can use the &lt;code&gt;--time-limit&lt;/code&gt; argument to set the limit you want, here all arguements you can set :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;--help : Displays a usage summary.&lt;/li&gt;
&lt;li&gt;--size &lt;WIDTHxHEIGHT&gt; : Sets the video size, for example: 1280x720. The default value is the device&amp;#39;s main display resolution (if supported), 1280x720 if not. For best results, use a size supported by your device&amp;#39;s Advanced Video Coding (AVC) encoder.&lt;/li&gt;
&lt;li&gt;--bit-rate &lt;RATE&gt; : Sets the video bit rate for the video, in megabits per second. The default value is 4Mbps. You can increase the bit rate to improve video quality or lower it for smaller movie files. The following example sets the recording bit rate to 6Mbps:
screenrecord --bit-rate 6000000 /sdcard/demo.mp4&lt;/li&gt;
&lt;li&gt;--time-limit &lt;TIME&gt; : Sets the maximum recording time, in seconds. The default and maximum value is 180 (3 minutes).&lt;/li&gt;
&lt;li&gt;--rotate : Rotates the output 90 degrees. This feature is experimental.&lt;/li&gt;
&lt;li&gt;--verbose : Displays log information on command line screen. If you do not set this option, the utility does not display any information while running.&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
            
        
            
        
            
            <entry>
                <title>Devtools Console, from Novice to Ninja</title>
                <link rel="alternate" href="http://daker.me/2013/12/devtools-console-from-novice-to-ninja.html" type="text/html" />
                <id>http://daker.me/2013/12/devtools-console-from-novice-to-ninja.html</id>
                <updated>2013-12-21T23:45:00Z</updated>

                <summary type="html">The &lt;a href=&#34;http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html&#34;&gt;JavaScript&lt;/a&gt; console is a powerful tool that allows developers debug their code using functions provided by the Console API and a shell prompt where they can enter commands and interact with the document object.</summary>
                <content type="html">&lt;p&gt;The &lt;a href=&#34;http://daker.me/2013/06/5-html5-javascript-apis-to-keep-an-eye-on.html&#34;&gt;JavaScript&lt;/a&gt; console is a powerful tool that allows developers debug their code using functions provided by the Console API and a shell prompt where they can enter commands and interact with the document object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/console.png&#34; alt=&#34;JavaScript Console&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Filters&lt;/h2&gt;
&lt;p&gt;There are different buttons allowing you to filter the display of messages logged to the console:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All — Shows all console output.&lt;/li&gt;
&lt;li&gt;Errors — Only show output from console.error()&lt;/li&gt;
&lt;li&gt;Warnings — Only show output from console.warn()&lt;/li&gt;
&lt;li&gt;Logs — Only show output from console.log(), console.info() and console.debug().&lt;/li&gt;
&lt;li&gt;Debug — Only show output from console.timeEnd() and other console output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/filters.png&#34; alt=&#34;Filters&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Errors and warnings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;console.info : Writes a message to the console with the visual &amp;quot;info&amp;quot; icon and color coding and a hyperlink to the line where it was called.&lt;/li&gt;
&lt;li&gt;console.warn : Writes a message to the console with the visual &amp;quot;warning&amp;quot; icon and color coding and a hyperlink to the line where it was called.&lt;/li&gt;
&lt;li&gt;console.debug : Writes a message to the console, including a hyperlink to the line where it was called.&lt;/li&gt;
&lt;li&gt;console.error : Writes a message to the console with the visual &amp;quot;error&amp;quot; icon and color coding and a hyperlink to the line where it was called.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/logging.png&#34; alt=&#34;Logging&#34;&gt;&lt;/p&gt;
&lt;h2&gt;console.dir[xml]&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.dir(object)&lt;/code&gt; prints an interactive listing of all properties of the object, while &lt;code&gt;console.dirxml(node)&lt;/code&gt; prints the XML source tree of an element.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/dir.png&#34; alt=&#34;JavaScript Console&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Assertions&lt;/h2&gt;
&lt;p&gt;Tests that an expression is true using &lt;code&gt;console.assert&lt;/code&gt;. If not, it will write a message to the console and throw an exception.&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;var x=0;
console.assert((x == 1), &amp;#34;assert message: x != 1&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Grouping output&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.group&lt;/code&gt; allows you to group the message or log in Console tab. If you have some many logs in your code, you can probably divide your log into small group or subgroup&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var user = &amp;#34;jsmith&amp;#34;, authenticated = false;
console.group(&amp;#34;Authentication phase&amp;#34;);
console.log(&amp;#34;Authenticating user &amp;#39;%s&amp;#39;&amp;#34;, user);
// authentication code here...
if (!authenticated) {
    console.log(&amp;#34;User &amp;#39;%s&amp;#39; not authenticated.&amp;#34;, user)
}
console.groupEnd();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also do nested grouping :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var user = &amp;#34;jsmith&amp;#34;, authenticated = true, authorized = true;
// Top-level group
console.group(&amp;#34;Authenticating user &amp;#39;%s&amp;#39;&amp;#34;, user);
if (authenticated) {
    console.log(&amp;#34;User &amp;#39;%s&amp;#39; was authenticated&amp;#34;, user);
    // Start nested group
    console.group(&amp;#34;Authorizing user &amp;#39;%s&amp;#39;&amp;#34;, user);
    if (authorized) {
        console.log(&amp;#34;User &amp;#39;%s&amp;#39; was authorized.&amp;#34;, user);
    }
    // End nested group
    console.groupEnd();
}
// End top-level group
console.groupEnd();
console.log(&amp;#34;A group-less log trace.&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/nested.png&#34; alt=&#34;Nested Grouping&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Logging Array Data&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.table()&lt;/code&gt; is a very handy fonction to display Array object&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var langs = [
    { name: &amp;#34;JavaScript&amp;#34;, extension: &amp;#34;.js&amp;#34; },
    { name: &amp;#34;HTML&amp;#34;, extension: &amp;#34;.html&amp;#34; },
    { name: &amp;#34;CoffeeScript&amp;#34;, extension: &amp;#34;.coffee&amp;#34; },
    { name: &amp;#34;SASS&amp;#34;, extension: &amp;#34;.sass&amp;#34; }
];

console.table(langs);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/table.png&#34; alt=&#34;JavaScript Console&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Measuring Execution time&lt;/h2&gt;
&lt;p&gt;To mesure how long something it takes to execute a set of instructions :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;var i, t = &amp;#34;&amp;#34;;

// Start
console.time(&amp;#34;OPNAME&amp;#34;);

for (i = 1; i &amp;lt;= 100; i++)
    t += i;

// Stop
console.timeEnd(&amp;#34;OPNAME&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Tracing&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;console.trace()&lt;/code&gt; prints the stacktrace of JavaScript execution at the point where it was called.&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;function F(v) {
    return K(v + 1);
}

function K(v) {
    return Y(v + 2);
}

function Y(v) {
    console.trace();
};

F(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/jsconsole/trace.png&#34; alt=&#34;Console Trace&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Shortcuts&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + J&lt;/code&gt; : Open the Chrome/ium Console&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl+l&lt;/code&gt; : Clear the console&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getfirebug.com/wiki/index.php/Console_Panel&#34;&gt;Firebug Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/chrome-developer-tools/docs/javascript-debugging#console-assert&#34;&gt;Chrome DevTools documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Adding UserMetrics to your app on Ubuntu Touch</title>
                <link rel="alternate" href="http://daker.me/2013/11/adding-usermetrics-to-your-app-on-ubuntu-touch.html" type="text/html" />
                <id>http://daker.me/2013/11/adding-usermetrics-to-your-app-on-ubuntu-touch.html</id>
                <updated>2013-11-30T16:00:00Z</updated>

                <summary type="html">The Welcome Screen infographic is one of the key components for the customization of the user experience on &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, beautiful visualisations of data from multiple sources, the &lt;code&gt;UserMetrics&lt;/code&gt; is the responsible component for updating the infographic using QML.</summary>
                <content type="html">&lt;p&gt;The Welcome Screen infographic is one of the key components for the customization of the user experience on &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, beautiful visualisations of data from multiple sources, the &lt;code&gt;UserMetrics&lt;/code&gt; is the responsible component for updating the infographic using QML.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/5.png&#34; alt=&#34;Welcome Screen&#34;&gt;&lt;/p&gt;

&lt;p&gt;To use the &lt;code&gt;UserMetrics&lt;/code&gt; QML module you need to install &lt;code&gt;qtdeclarative5-usermetrics0.1&lt;/code&gt; package on the desktop :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install qtdeclarative5-usermetrics0.1
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Apparmor Policy groups&lt;/h2&gt;
&lt;p&gt;Add the &lt;code&gt;usermetrics&lt;/code&gt; to your apparmor file :&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
    &amp;#34;policy_groups&amp;#34;: [
        ...
        &amp;#34;usermetrics&amp;#34;
    ],
    &amp;#34;policy_version&amp;#34;: 1.0
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;QML&lt;/h2&gt;
&lt;p&gt;First you need to import the &lt;code&gt;UserMetrics&lt;/code&gt; module :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;import UserMetrics 0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then create the metric(s) :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Metric {
    /* Set a unique ID for each metric object you use so you can access it in your QML code. */
    id: gameMetric

    /* Set a unique name for each metric object, this is used for the storage of the metric data. */
    name: &amp;#34;game-metrics&amp;#34;

    /* This is the format for the plural case. */
    format: &amp;#34;%1 missions completed today&amp;#34;

    /* This is the format for no data for the day. */
    emptyFormat: &amp;#34;0 missions completed today&amp;#34;

    /* This is the gettext domain used for the localisation, you can use the applicationName. */
    domain: &amp;#34;com.ubuntu.developer.daker.mygame&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Metric component provides two methods :&lt;/p&gt;

&lt;p&gt;— &lt;code&gt;increment(double amount = 1.0)&lt;/code&gt; : You can use this method if you want to increment metric by a specific amount ex: gameMetric.increment(3) or gameMetric.increment() to increment the metric by 1.&lt;br&gt;
— &lt;code&gt;update(double value)&lt;/code&gt; : You can use this method if you want to reset the metric and set a specific amount ex: gameMetric.update(5)&lt;/p&gt;

&lt;p&gt;The use of the Metric is not limited by the number.&lt;/p&gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Web Apps Remote Debugging on Ubuntu Touch</title>
                <link rel="alternate" href="http://daker.me/2013/11/web-apps-remote-debugging-on-ubuntu-touch.html" type="text/html" />
                <id>http://daker.me/2013/11/web-apps-remote-debugging-on-ubuntu-touch.html</id>
                <updated>2013-11-14T23:40:00Z</updated>

                <summary type="html">If you are writing Web Apps for &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, you might want to test them directly on the phone using the Ubuntu browser, this can be done by remotely debugging web pages using the built-in DevTools, which allow you to inspect, debug, and analyze the on-device experience with the full suite of tools you&amp;#39;re used to.</summary>
                <content type="html">&lt;p&gt;If you are writing Web Apps for &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt;, you might want to test them directly on the phone using the Ubuntu browser, this can be done by remotely debugging web pages using the built-in DevTools, which allow you to inspect, debug, and analyze the on-device experience with the full suite of tools you&amp;#39;re used to.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/3.png&#34; alt=&#34;Ubuntu Browser&#34;&gt;&lt;/p&gt;

&lt;p&gt;The phablet-team PPA has the tools and dependencies for 12.04, 12.10, 13.04 and 13.10 to get everything setup:&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo add-apt-repository ppa:phablet-team/tools
$ sudo apt-get update
$ sudo apt-get install phablet-tools android-tools-adb android-tools-fastboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Plug the device via the USB cable, then run the following commands to connect to it through ADB&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ adb shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Switch to the phablet user :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo -u phablet -i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Take a note of your phone IP adresse :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ ifconfig wlan0 | grep &amp;#39;inet addr&amp;#39; | cut -d: -f2 | awk &amp;#39;{print $1}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done launch the webbrowser app using :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ upstart-app-launch webbrowser-app --inspector
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A browser instance will launch on the phone, point to URL of your webapp then access the Devtools with your Chrome/ium browser by opening &lt;code&gt;http://$YOUR-PHONE-IP:9221&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/4.png&#34; alt=&#34;DevTools&#34;&gt;&lt;/p&gt;

&lt;p&gt;The built-in Devtools is a bit old &amp;amp; slow so i am using the hosted version : &lt;code&gt;https://chrome-devtools-frontend.appspot.com/static/30.0.1599.118/devtools.html?ws=$YOUR-PHONE-IP:9221/devtools/page/$PAGE-ID&lt;/code&gt;, you can get the page id from &lt;code&gt;http://$YOUR-PHONE-IP:9221/pagelist.json&lt;/code&gt;&lt;/p&gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Ubuntu Touch User-Agent</title>
                <link rel="alternate" href="http://daker.me/2013/11/ubuntu-touch-user-agent.html" type="text/html" />
                <id>http://daker.me/2013/11/ubuntu-touch-user-agent.html</id>
                <updated>2013-11-06T19:00:00Z</updated>

                <summary type="html">With the launch of &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt; v1.0, the OS now ships its own QtWebKit based browser which will be replaced by &lt;a href=&#34;https://launchpad.net/oxide&#34;&gt;Oxide&lt;/a&gt; a Chromium-powered webview by 14.04. There has been a lot of &lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1179596&#34;&gt;discussions&lt;/a&gt; arround the user-agent because many large sites(Facebook, Google, Twitter, Yahoo etc..) are sniffing the UA(for iPhone or Android tokens) to serve the mobile version of the site.</summary>
                <content type="html">&lt;p&gt;With the launch of &lt;a href=&#34;http://www.ubuntu.com/phone/install&#34;&gt;Ubuntu Touch&lt;/a&gt; v1.0, the OS now ships its own QtWebKit based browser which will be replaced by &lt;a href=&#34;https://launchpad.net/oxide&#34;&gt;Oxide&lt;/a&gt; a Chromium-powered webview by 14.04. There has been a lot of &lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1179596&#34;&gt;discussions&lt;/a&gt; arround the user-agent because many large sites(Facebook, Google, Twitter, Yahoo etc..) are sniffing the UA(for iPhone or Android tokens) to serve the mobile version of the site.&lt;/p&gt;

&lt;p&gt;Adding an Android or iPhone token will lead to unwanted behaviours, like showing ads for the Android app or even trying to open the Google Play app or the Youtube app. The browser now reports it in the following formats, depending on whether the device is a phone or a tablet, with the addition of an &lt;a href=&#34;https://bazaar.launchpad.net/%7Ephablet-team/webbrowser-app/trunk/view/head:/src/Ubuntu/Components/Extras/Browser/ua-overrides.js&#34;&gt;override mechanism&lt;/a&gt; that will override the UA on the fly and the site will serve us a proper mobile content.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/1.png&#34; alt=&#34;Facebook Android Ads&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Phone&lt;/h2&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Mozilla/5.0 (Ubuntu; Mobile) WebKit/537.21
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Tablet&lt;/h2&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Mozilla/5.0 (Ubuntu; Tablet) WebKit/537.21
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Pattern&lt;/h2&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;Mozilla/5.0 (Ubuntu; $FormFactor) WebKit/$WebKitRev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also get it through JavaScript using the &lt;code&gt;navigator.userAgent&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/utouch/2.png&#34; alt=&#34;Using the console&#34;&gt;&lt;/p&gt;

&lt;p&gt;So if you are doing UA sniffing it&amp;#39;s really better to look for &amp;quot;Mobile&amp;quot; rather than looking the OS identifier.&lt;/p&gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Package your Webapp for Ubuntu Touch</title>
                <link rel="alternate" href="http://daker.me/2013/10/package-your-webapp-for-ubuntu-touch.html" type="text/html" />
                <id>http://daker.me/2013/10/package-your-webapp-for-ubuntu-touch.html</id>
                <updated>2013-10-15T23:50:00Z</updated>

                <summary type="html">Last week i discovered a HTML5 game called &amp;#39;&lt;a href=&#34;http://phoboslab.org/xtype/&#34;&gt;X-Type&lt;/a&gt;&amp;#39;, which is basically a free dual stick shooter with endless boss battles. Unfortunately this game does only work on iOS and Android and it does use the UA sniffing mechanism to serve both desktop and mobile versions, and using the Ubuntu Touch user-agent it will only serve the desktop version which will not work on the phone.</summary>
                <content type="html">&lt;p&gt;Last week i discovered a HTML5 game called &amp;#39;&lt;a href=&#34;http://phoboslab.org/xtype/&#34;&gt;X-Type&lt;/a&gt;&amp;#39;, which is basically a free dual stick shooter with endless boss battles. Unfortunately this game does only work on iOS and Android and it does use the UA sniffing mechanism to serve both desktop and mobile versions, and using the Ubuntu Touch user-agent it will only serve the desktop version which will not work on the phone.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/xtype/xtype.png&#34; alt=&#34;X-Type running on Ubuntu Touch&#34;&gt;&lt;/p&gt;

&lt;p&gt;First using the Qt Creator you have to create a &amp;quot;HTML5 Touch UI&amp;quot; project which will produce the following QML code :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import QtQuick 2.0
import Ubuntu.Components 0.1
import QtWebKit 3.0

MainView {
    objectName: &amp;#34;mainView&amp;#34;
    applicationName: &amp;#34;com.ubuntu.developer.daker.x-type&amp;#34;
    automaticOrientation: true

    width: units.gu(100)
    height: units.gu(75)

    Flickable {
        id: webViewFlickable
        anchors.fill: parent

        WebView {
            id: webView
            anchors.fill: parent
            url: &amp;#34;http://phoboslab.org/xtype/&amp;#34;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The problem with using the QtWebKit Webview is that the device-pixel-ratio (DPR) is not set automatically causing the content of the Webview to not scale correctly, so you&amp;#39;ll need to get the corresponding value for your device from the &lt;code&gt;QTWEBKIT_DPR&lt;/code&gt; environment variable, there is actually no way to read those variables using QML so you&amp;#39;ll need to use some C++ code to read the &lt;code&gt;QTWEBKIT_DPR&lt;/code&gt; and passe it to QML so the content of the WebView will scale accordingly.&lt;/p&gt;

&lt;p&gt;The Ubuntu Touch Browser Plugin provides a component called &lt;code&gt;UbuntuWebView&lt;/code&gt;, it uses some kind of UA overrides to bypass the UA sniffing used to serve the mobile version of webapp(Gmail, G+, Facebook, Twitter, etc...) and changes the UA on the fly, unfortunately there was no way to set your own UA using the &lt;code&gt;UbuntuWebView&lt;/code&gt; but now you can since this &lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1237365&#34;&gt;bug #1237365&lt;/a&gt; has been fixed.&lt;/p&gt;

&lt;p&gt;Also with the &lt;code&gt;UbuntuWebView&lt;/code&gt; the &lt;code&gt;DPR&lt;/code&gt; weren&amp;#39;t set automatically(&lt;a href=&#34;https://bugs.launchpad.net/webbrowser-app/+bug/1237348&#34;&gt;bug #1237348&lt;/a&gt;), it was also fixed and all those fixes has been shipped with image #96.&lt;/p&gt;

&lt;p&gt;Here is the QML code i used to embed the &amp;quot;X-Type&amp;quot; game(Fullscreen) but first you need to install the browser plugin :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install qtdeclarative5-ubuntu-ui-extras-browser-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;import QtQuick 2.0
import Ubuntu.Components 0.1
import Ubuntu.Components.Extras.Browser 0.1


MainView {
    objectName: &amp;#34;mainView&amp;#34;
    applicationName: &amp;#34;com.ubuntu.developer.daker.x-type&amp;#34;
    //automaticOrientation: true

    width: units.gu(50)
    height: units.gu(75)

    UbuntuWebView {
        anchors.fill: parent
        url: &amp;#34;http://phoboslab.org/xtype/&amp;#34;
        /* This function is used to override the UA */
        function getUAString(url) {
            return &amp;#34;Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3&amp;#34;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you need to create a &lt;code&gt;manifest.json&lt;/code&gt; file :&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
    &amp;#34;description&amp;#34;: &amp;#34;A Free HTML5 Dual Stick Shooter&amp;#34;,
    &amp;#34;framework&amp;#34;: &amp;#34;ubuntu-sdk-13.10&amp;#34;,
    &amp;#34;architecture&amp;#34;: &amp;#34;all&amp;#34;,
    &amp;#34;hooks&amp;#34;: {
        &amp;#34;x-type&amp;#34;: {
            &amp;#34;apparmor&amp;#34;: &amp;#34;x-type.json&amp;#34;,
            &amp;#34;desktop&amp;#34;: &amp;#34;x-type.desktop&amp;#34;
        }
    },
    &amp;#34;maintainer&amp;#34;: &amp;#34;Adnane Belmadiaf &amp;lt;daker@ubuntu.com&amp;gt;&amp;#34;,
    &amp;#34;name&amp;#34;: &amp;#34;com.ubuntu.developer.daker.x-type&amp;#34;,
    &amp;#34;title&amp;#34;: &amp;#34;X-Type&amp;#34;,
    &amp;#34;version&amp;#34;: &amp;#34;0.4&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the security policy groups &lt;code&gt;x-type.json&lt;/code&gt; :&lt;/p&gt;
&lt;pre lang=&#34;json&#34;&gt;&lt;code&gt;{
    &amp;#34;policy_groups&amp;#34;: [
        &amp;#34;networking&amp;#34;
    ],
    &amp;#34;policy_version&amp;#34;: 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and a .desktop file :&lt;/p&gt;
&lt;pre lang=&#34;js&#34;&gt;&lt;code&gt;[Desktop Entry]
Name=x-type
Comment=A Free HTML5 Dual Stick Shooter
Exec=qmlscene $@ x-type.qml
Icon=./x-type.png
Terminal=false
Type=Application
X-Ubuntu-Touch=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;you need to add the icon and now all you have to do is to build the click package using &lt;code&gt;click build .&lt;/code&gt;and &lt;a href=&#34;https://myapps.developer.ubuntu.com/dev/click-apps/new/&#34;&gt;upload&lt;/a&gt; it to the store. I have also packaged another HTML5 game called &lt;a href=&#34;http://heliom.github.io/bytesjack/&#34;&gt;BytesJack&lt;/a&gt; using the same method, the source code of both games can be found &lt;a href=&#34;https://bazaar.launchpad.net/%7Edaker/+junk/x-type/files&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://bazaar.launchpad.net/%7Edaker/+junk/bytesjack/files&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Automate Your Dev Environment With Vagrant</title>
                <link rel="alternate" href="http://daker.me/2013/09/automate-your-dev-environment-with-vagrant.html" type="text/html" />
                <id>http://daker.me/2013/09/automate-your-dev-environment-with-vagrant.html</id>
                <updated>2013-09-29T18:00:00Z</updated>

                <summary type="html">I started feeling the need of automating my developement environments when i started contributing to several django projects run by the community, each project uses a different django version and several dependencies, thoses dependencies can be found or not on the Ubuntu version i use for my daily work. Vagrant is a great tool for those situations, it allow you to create and manage custom virtual environments to your needs using automated configuration technologies such as Chef, Puppet and Shell scripts.</summary>
                <content type="html">&lt;p&gt;I started feeling the need of automating my developement environments when i started contributing to several django projects run by the community, each project uses a different django version and several dependencies, thoses dependencies can be found or not on the Ubuntu version i use for my daily work. Vagrant is a great tool for those situations, it allow you to create and manage custom virtual environments to your needs using automated configuration technologies such as Chef, Puppet and Shell scripts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/vagrant/vagrant.jpg&#34; alt=&#34;Vagrant&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Installing Vagrant&lt;/h2&gt;
&lt;p&gt;Vagrant works with VirtualBox, and support &lt;a href=&#34;http://www.vagrantup.com/vmware&#34;&gt;Vmware Fusion&lt;/a&gt; and AWS via plugins&lt;/p&gt;
&lt;h3&gt;Install Virtualbox&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install virtualbox
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;Install Vagrant&lt;/h3&gt;&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo apt-get install vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure Vagrant is installed correctly&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant --version
Vagrant version 1.2.0
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Get your first VM up and running&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;start a vagrant config file in an empty project folder. this will create &lt;code&gt;Vagrantfile&lt;/code&gt;&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ mkdir project
$ cd project
$ vagrant init
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;edit &lt;code&gt;Vagrantfile&lt;/code&gt; to add the boxname&lt;/p&gt;
&lt;pre lang=&#34;ruby&#34;&gt;&lt;code&gt;Vagrant::Config.run do |config|
    config.vm.box = &amp;#34;devserver&amp;#34;
end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;add a base image or box to quickly clone a virtual machine. this will create a folder .vagrant with an ubuntu box&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant box add devserver http://files.vagrantup.com/precise32.box
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;then you are ready to go&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant up
[default] Importing base box &amp;#39;precise32&amp;#39;...
[default] Matching MAC address for NAT networking...
[default] Clearing any previously set forwarded ports...
[default] Forwarding ports...
[default] -- 22 =&amp;gt; 2222 (adapter 1)
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Mounting shared folders...
[default] -- v-root: /vagrant
[...]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Wait for the command to finish, then you will have a VM ready for you to connect. the VM can be accessed via SSH:&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Provisioning&lt;/h2&gt;
&lt;p&gt;Vagrant allow you to use different Provisioners to easily setup your VM with everything it needs to run your project :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chef Solo&lt;/li&gt;
&lt;li&gt;Chef Server&lt;/li&gt;
&lt;li&gt;Puppet Standalone&lt;/li&gt;
&lt;li&gt;Puppet Server&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do prefer Puppet for provisioning, because it&amp;#39;s easy and it allow you to easily create a manifest to control the package, file or service with a few lines of code.&lt;/p&gt;

&lt;p&gt;Here is the &lt;code&gt;Vagrantfile&lt;/code&gt; i use, i needed to forward the port 8000 because i want to access the webapp using my browser, i also increased the memory of the VM to 1GB, and made the project folder accessible to the VM :&lt;/p&gt;
&lt;pre lang=&#34;ruby&#34;&gt;&lt;code&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant::Config.run do |ltp|

    ltp.vm.box = &amp;#34;ltp-devserver&amp;#34;
    ltp.vm.box_url = &amp;#34;http://files.vagrantup.com/precise32.box&amp;#34;
    ltp.vm.forward_port 8000, 8000
    ltp.vm.network :hostonly, &amp;#34;33.33.33.10&amp;#34;
    ltp.vm.customize [&amp;#34;modifyvm&amp;#34;, :id, &amp;#34;--memory&amp;#34;, 1024]

    ltp.ssh.max_tries = 50
    ltp.ssh.timeout = 300

    ltp.vm.share_folder(&amp;#34;v-root&amp;#34;, &amp;#34;/home/vagrant/ltp&amp;#34;, &amp;#34;.&amp;#34;)

    ltp.vm.provision :puppet do |puppet|
        puppet.manifests_path = &amp;#34;puppet/manifests&amp;#34;
        puppet.manifest_file  = &amp;#34;vagrant.pp&amp;#34;
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;here one of the classes i use on my dev environement :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;class init {

    group { &amp;#34;puppet&amp;#34;:
        ensure =&amp;gt; &amp;#34;present&amp;#34;,
    }

    # Let&amp;#39;s update the system
    exec { &amp;#34;update-apt&amp;#34;:
        command =&amp;gt; &amp;#34;sudo apt-get update&amp;#34;,
    }

    # Let&amp;#39;s install the dependecies
    package {
        [&amp;#34;python&amp;#34;, &amp;#34;python-dev&amp;#34;, &amp;#34;libjs-jquery&amp;#34;, &amp;#34;libjs-jquery-ui&amp;#34;, &amp;#34;iso-codes&amp;#34;, &amp;#34;gettext&amp;#34;, &amp;#34;python-pip&amp;#34;, &amp;#34;bzr&amp;#34;]:
        ensure =&amp;gt; installed,
        require =&amp;gt; Exec[&amp;#39;update-apt&amp;#39;] # The system update needs to run first
    }

    # Let&amp;#39;s install the project dependecies from pip
    exec { &amp;#34;pip-install-requirements&amp;#34;:
        command =&amp;gt; &amp;#34;sudo /usr/bin/pip install -r $PROJ_DIR/requirements.txt&amp;#34;,
        tries =&amp;gt; 2,
        timeout =&amp;gt; 600, # Too long, but this can take awhile
        require =&amp;gt; Package[&amp;#39;python-pip&amp;#39;, &amp;#39;python-dev&amp;#39;], # The package dependecies needs to run first
        logoutput =&amp;gt; on_failure,
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to specify one manifest file in your Vagranfile, if you need to split it, you can use something like this :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ tree
.
└── manifests
    ├── classes
    │   ├── init.pp
    │   └── ltp.pp
    └── vagrant.pp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I use &lt;code&gt;vagrant.pp&lt;/code&gt; to define my project variables, and to make sure all the classes are executed in the order i want :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;import &amp;#34;classes/*.pp&amp;#34;

$PROJ_DIR = &amp;#34;/home/vagrant/ltp&amp;#34;

Exec {
    path =&amp;gt; &amp;#34;/usr/local/bin:/usr/bin:/usr/sbin:/sbin:/bin&amp;#34;,
}

class dev {

    class {
        init: before =&amp;gt; Class[ltp];
        ltp:;
    }
}

include dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;ltp&lt;/code&gt; class is only used to run some &lt;code&gt;django&lt;/code&gt; commands :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;class ltp {

    file { &amp;#34;$PROJ_DIR/loco_directory/local_settings.py&amp;#34;:
        ensure =&amp;gt; file,
        source =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory/local_settings.py.sample&amp;#34;,
        replace =&amp;gt; false;
    }

    exec {
        &amp;#34;db_download&amp;#34;:
            cwd =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory&amp;#34;,
            command =&amp;gt; &amp;#34;/usr/bin/wget http://people.ubuntu.com/~daker/ltp/ltp.db&amp;#34;,
            creates =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory/ltp.db&amp;#34;;
    }

    exec {
        &amp;#34;managepy_syncdb&amp;#34;:
            cwd =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory&amp;#34;,
            command =&amp;gt; &amp;#34;/usr/bin/python manage.py syncdb --noinput&amp;#34;,
    }

    exec {
        &amp;#34;managepy_migratedb&amp;#34;:
            cwd =&amp;gt; &amp;#34;$PROJ_DIR/loco_directory&amp;#34;,
            command =&amp;gt; &amp;#34;/usr/bin/python manage.py migrate&amp;#34;,
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now all i have to do is &lt;code&gt;vagrant up&lt;/code&gt; and let Vagrant do all his magic tricks :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ vagrant up
[default] Importing base box &amp;#39;ltp-devserver&amp;#39;...
[default] Matching MAC address for NAT networking...
[default] Clearing any previously set forwarded ports...
[default] Forwarding ports...
[default] -- 22 =&amp;gt; 2222 (adapter 1)
[default] -- 8000 =&amp;gt; 8000 (adapter 1)
[default] Creating shared folders metadata...
[default] Clearing any previously set network interfaces...
[default] Preparing network interfaces based on configuration...
[default] Running any VM customizations...
[default] Booting VM...
[default] Waiting for VM to boot. This can take a few minutes.
[default] VM booted and ready for use!
[default] Configuring and enabling network interfaces...
[default] Mounting shared folders...
[default] -- v-root: /home/vagrant/ltp
[default] -- manifests: /tmp/vagrant-puppet/manifests
[default] Running provisioner: Vagrant::Provisioners::Puppet...
[default] Running Puppet with /tmp/vagrant-puppet/manifests/vagrant.pp...
stdin: is not a tty
warning: Could not retrieve fact fqdn

notice: /Stage[main]/Init/Exec[update-apt]/returns: executed successfully

notice: /Stage[main]/Init/Package[python-pip]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Package[bzr]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Package[libjs-jquery-ui]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Package[python-dev]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Init/Exec[pip-install-requirements]/returns: executed successfully

notice: /Stage[main]/Init/Package[gettext]/ensure: ensure changed &amp;#39;purged&amp;#39; to &amp;#39;present&amp;#39;

notice: /Stage[main]/Ltp/File[/home/vagrant/ltp/loco_directory/local_settings.py]/ensure: defined content as &amp;#39;{md5}25234f94c80418dcb7cc59f3db2dd7f8&amp;#39;

notice: /Stage[main]/Ltp/Exec[db_download]/returns: executed successfully

notice: /Stage[main]/Ltp/Exec[managepy_syncdb]/returns: executed successfully

notice: /Stage[main]/Ltp/Exec[managepy_migratedb]/returns: executed successfully

notice: Finished catalog run in 811.47 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After i started using Vagrant, my workflow imporved a lot i start focusing on writing code rather than resolving packages conflicts, i do use a VM for each bug fix/feature i need to work on, and once the fix is merged i simply delete the VM without thinking about breaking anything.&lt;/p&gt;

&lt;p&gt;[NB]: Ubuntu now officially supports Vagrant, and provides &lt;a href=&#34;http://cloud-images.ubuntu.com/vagrant/&#34;&gt;official Ubuntu boxes&lt;/a&gt; for 12.04, 12.10, 13.04 and 13.10.&lt;/p&gt;
</content>
            </entry>
            
        
            
        
            
            <entry>
                <title>5 DevTools features to help you debug your WebApp</title>
                <link rel="alternate" href="http://daker.me/2013/09/5-devtools-features-to-help-you-debug-your-webapp.html" type="text/html" />
                <id>http://daker.me/2013/09/5-devtools-features-to-help-you-debug-your-webapp.html</id>
                <updated>2013-09-14T22:15:00Z</updated>

                <summary type="html">DevTools is a powerful tool than can made developing WebApp easier, it has a lot of features some of them are still experimental and you need to enable them in the &lt;code&gt;about://flags&lt;/code&gt;.</summary>
                <content type="html">&lt;p&gt;DevTools is a powerful tool than can made developing WebApp easier, it has a lot of features some of them are still experimental and you need to enable them in the &lt;code&gt;about://flags&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/devtools.png&#34; alt=&#34;Devtools&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Breakpoints&lt;/h2&gt;
&lt;p&gt;Breakpoint are related to the JavaScript code, it let&amp;#39;s you halt the JavaScript code execution and inspect the current environment. You can set them by simply going the &amp;quot;Source&amp;quot; tab, then select the JS file you want to debug , find the line you want to set a breakpoint on, then click the line number to apply a breakpoint :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/breakpoints.png&#34; alt=&#34;Javascript Breakpoints&#34;&gt;&lt;/p&gt;

&lt;p&gt;The DevTools also supports conditional breakpoints.&lt;/p&gt;
&lt;h2&gt;DOM Breakpoints&lt;/h2&gt;
&lt;p&gt;The DevTools can also be used to set breakpoints on the DOM elements direclty, just right click on the element you want to break on, then select the option you want :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/dom-breakpoints.png&#34; alt=&#34;DOM Breakpoints&#34;&gt;&lt;/p&gt;
&lt;h2&gt;monitorEvents&lt;/h2&gt;
&lt;p&gt;The Devtools has a built function called &lt;code&gt;monitorEvents&lt;/code&gt;, it lets you monitor objects for mouse, key, touch or control events :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/monitorEvents.png&#34; alt=&#34;monitorEvents&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Pretty Print&lt;/h2&gt;
&lt;p&gt;Pretty Print is a handy feature for debugging minified JavaScript. Trying to to set a breakpoint when everything is on the same line is something impossible, clicking on the &lt;code&gt;{}&lt;/code&gt; icon will make your Javascript code readable and easier to debug :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/pprint-before.png&#34; alt=&#34;Pretty Print - Before&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/pprint-after.png&#34; alt=&#34;Pretty Print - After&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Remote Debugging&lt;/h2&gt;
&lt;p&gt;The Remote Debugger lets you connect Chrome/ium browser to the Chrome mobile browser so that you can use your desktop browser to debug all your tabs from your remote device :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/devtools/remote-debugging.png&#34; alt=&#34;Remote Debugging&#34;&gt;&lt;/p&gt;

&lt;p&gt;and sure the DevTools still has a lot of features to cover from the &lt;code&gt;Source&lt;/code&gt; to the &lt;code&gt;Console&lt;/code&gt; Tab.&lt;/p&gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Adding Persona authentication to your django project</title>
                <link rel="alternate" href="http://daker.me/2013/09/adding-persona-authentication-to-your-django-project.html" type="text/html" />
                <id>http://daker.me/2013/09/adding-persona-authentication-to-your-django-project.html</id>
                <updated>2013-09-01T16:30:00Z</updated>

                <summary type="html">&lt;a href=&#34;https://www.mozilla.org/en-US/persona/&#34;&gt;Persona&lt;/a&gt; is a decentralized login system made by &lt;a href=&#34;https://www.mozilla.org/&#34;&gt;Mozilla&lt;/a&gt; that aims to eliminate site-specific passwords so you can log in with your existing email accounts without having to type in a password.</summary>
                <content type="html">&lt;p&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/persona/&#34;&gt;Persona&lt;/a&gt; is a decentralized login system made by &lt;a href=&#34;https://www.mozilla.org/&#34;&gt;Mozilla&lt;/a&gt; that aims to eliminate site-specific passwords so you can log in with your existing email accounts without having to type in a password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/persona-mozilla.jpg&#34; alt=&#34;Persona&#34;&gt;&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Mozilla provides a library called &lt;code&gt;django-browserid&lt;/code&gt; that integrates Persona authentication into Django, so you can simply added to to your &lt;code&gt;requirements.txt&lt;/code&gt; or just install via pip :&lt;/p&gt;
&lt;pre lang=&#34;sh&#34;&gt;&lt;code&gt;$ sudo pip install django-browserid
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Once done you need to follow the following steps :&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;django-browserid&lt;/code&gt; to your &lt;code&gt;INSTALLED_APPS&lt;/code&gt;,&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;INSTALLED_APPS = (
    # ...
    &amp;#39;django.contrib.auth&amp;#39;,
    &amp;#39;django.contrib.contenttypes&amp;#39;,
    &amp;#39;django.contrib.staticfiles&amp;#39;,
    &amp;#39;django.contrib.sessions&amp;#39;,
    &amp;#39;django.contrib.messages&amp;#39;,
    &amp;#39;django.contrib.admin&amp;#39;,
    &amp;#39;django_browserid&amp;#39;,
    # ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the &lt;code&gt;django_browserid&lt;/code&gt; authentication backend :&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;AUTHENTICATION_BACKENDS = (
   # ...
   &amp;#39;django.contrib.auth.backends.ModelBackend&amp;#39;, # required for admin
   &amp;#39;django_browserid.auth.BrowserIDBackend&amp;#39;,
   # ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the &lt;code&gt;django_browserid&lt;/code&gt; context processor :&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;TEMPLATE_CONTEXT_PROCESSORS = (
   # ...
   &amp;#39;django_browserid.context_processors.browserid&amp;#39;,
   # ...
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and finally you need to set your site url :&lt;/p&gt;
&lt;pre lang=&#34;python&#34;&gt;&lt;code&gt;SITE_URL = &amp;#39;https://example.com&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have created a working demo project on &lt;a href=&#34;https://github.com/daker/django-persona-demo&#34;&gt;github&lt;/a&gt; to play with, you can still check the &lt;a href=&#34;http://django-browserid.readthedocs.org/en/v0.9/details/troubleshooting.html&#34;&gt;docs&lt;/a&gt; or comment here if it doesn&amp;#39;t work for you.&lt;/p&gt;
</content>
            </entry>
            
        
            
            <entry>
                <title>Thank you, Ubuntu!</title>
                <link rel="alternate" href="http://daker.me/2013/08/thank-you-ubuntu.html" type="text/html" />
                <id>http://daker.me/2013/08/thank-you-ubuntu.html</id>
                <updated>2013-08-26T21:30:00Z</updated>

                <summary type="html">My experience with &lt;a href=&#34;http://www.ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; started in 2007 when i was doing the internship of my second year in Computer Engineering, the first week was really boring, the second week and while i was trying to fix the DVD driver, i opened the drawer then i found a Green CD of &amp;quot;OpenSUSE&amp;quot;, i booted with the live CD, the OS was a bit complicated and not easy to play with.</summary>
                <content type="html">&lt;p&gt;My experience with &lt;a href=&#34;http://www.ubuntu.com&#34;&gt;Ubuntu&lt;/a&gt; started in 2007 when i was doing the internship of my second year in Computer Engineering, the first week was really boring, the second week and while i was trying to fix the DVD driver, i opened the drawer then i found a Green CD of &amp;quot;OpenSUSE&amp;quot;, i booted with the live CD, the OS was a bit complicated and not easy to play with.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/certificate.jpg&#34; alt=&#34;My Ubuntu certificate, signed by Mark Shuttleworth&#34;&gt;&lt;/p&gt;

&lt;p&gt;I started googling for other Gnu/Linux distributions, after a few hours i found a distro called &amp;quot;Ubuntu&amp;quot;, i downloaded the iso, booted with the live CD it was easy to access almost everything(browser, e-mail client, musique player and an office suite that comes out of the box), then Ubuntu becomes my second OS.&lt;/p&gt;

&lt;p&gt;In 2009 i read an &lt;a href=&#34;http://www.omgubuntu.co.uk/2010/01/interview-with-ubuntu-manual-project-leader&#34;&gt;article&lt;/a&gt; on OMG!Ubuntu about a project called &amp;quot;The Ubuntu Manual Project&amp;quot;, they were looking for contributors, as you may know i do a lot of web developement i jumed on the IRC channel someone pointed me the mockups, in few days the &lt;a href=&#34;http://ubuntu-manual.org&#34;&gt;site(made by myself)&lt;/a&gt; was up and running until now. That&amp;#39;s where my story with Ubuntu began.&lt;/p&gt;

&lt;p&gt;I learned a lot of things and i had the pleasure to know and meet a lot of great &amp;amp; inspiring people virtually and IRL.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/1.jpg&#34; alt=&#34;Me and Daniel Holbach&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/2.jpg&#34; alt=&#34;From the right : IamNotThatGuy , Me, Joel Pickett, Rohan Garg, Ayrton Araújo, Randall Ross &amp;lt;br /&amp;gt;Steve Riley the former face of Microsoft Security and another guy&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/3.jpg&#34; alt=&#34;Me and the Kubuntu developers&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://daker.me/assets/posts/ubuntu/4.jpg&#34; alt=&#34;Me and the Kubuntu developers again&#34;&gt;&lt;/p&gt;

&lt;p&gt;Thank you, Ubuntu!&lt;/p&gt;
</content>
            </entry>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
            <entry>
                <title>Hello World</title>
                <link rel="alternate" href="http://daker.me/2013/05/hello-world.html" type="text/html" />
                <id>http://daker.me/2013/05/hello-world.html</id>
                <updated>2013-05-22T23:55:00Z</updated>

                <summary type="html">Hello World! I’ve been wanting a to start my own blog for a while now. Time and other constraints have been preventing me, but I finally sat down over the last week-end and hacked together what you actually see.</summary>
                <content type="html">&lt;p&gt;Hello World! I’ve been wanting a to start my own blog for a while now. Time and other constraints have been preventing me, but I finally sat down over the last week-end and hacked together what you actually see.&lt;/p&gt;

&lt;p&gt;It’s all handwritten in &lt;a href=&#34;https://en.wikipedia.org/wiki/Markdown&#34;&gt;markdown&lt;/a&gt;, generated by &lt;a href=&#34;http://mynt.mirroredwhite.com&#34;&gt;mynt&lt;/a&gt;, and powered by &lt;a href=&#34;http://pages.github.com&#34;&gt;Github pages&lt;/a&gt;, with commenting by &lt;a href=&#34;http://disqus.com/&#34;&gt;Disqus&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have decided to license the content of this website under a Creative Commons license; CC-BY-SA 3.0 Unported, to be exact. This means that you can take what I will write on this blog, reuse it for whatever you see fit, or combine it with other content under the same license, e.g. from Wikipedia. The only requirements are that :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you quote where you got it from, i.e. from me (Adnane Belmadiaf) and this website (&lt;a href=&#34;http://daker.me&#34;&gt;daker.me&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;you share the result under the same license&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So feel free to leave a comment or tweet me &lt;a href=&#34;https://twitter.com/AdnaneBelmadiaf&#34;&gt;@AdnaneBelmadiaf&lt;/a&gt;.&lt;/p&gt;
</content>
            </entry>
            
        
    </feed>
